<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/11/10/javascript/js-problem/"/>
      <url>/2021/11/10/javascript/js-problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-js中的addEventListener使用"><a href="#1-js中的addEventListener使用" class="headerlink" title="1.js中的addEventListener使用"></a>1.js中的addEventListener使用</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2222222222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//js使用addEventListener时，绑定事件后面的函数如果是在当前定义的，那么只有在绑定的事件触发时才会对其进行调用</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//只有在键盘抬起时，会调用fn1() 输出1111111</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//绑定事件后面的函数如果是在全局定义的过的，那么它会先执行一次，在绑定的事件触发时，会调用fn1()执行后返回的函数</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//自执行一次，输出1111111，键盘输入抬起时，输出一次222222222</span>        <span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-学习笔记</title>
      <link href="/2021/11/06/vue/vue2/"/>
      <url>/2021/11/06/vue/vue2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><p>MVC : Model、View、Controller,表示数据、视图、控制器。Model：数据模型，用来存储数据。View：视图界面，用来展示UI界面和响应用户交互。Controller:控制器，监听模型数据的改变和控制视图行为、处理用户交互。</p><p>MVVM：Model、View、ViewModel。ViewModel是MVVM中的核心，他会将模型转化成视图，就是将后端传递的数据转化成所看到的页面。他也会吧视图转化成模型，就是将所看到的页面转化成后端的数据。</p><h3 id="Vue-Options"><a href="#Vue-Options" class="headerlink" title="Vue Options"></a>Vue Options</h3><p>el: string || HTMLElement 作用：决定Vue实例会管理哪一个DOM</p><p>data：Object || Function(组件当中data必须是函数)，作用Vu实例对应的数据对象</p><p>methods：{ [key:sting] : Function }</p><h3 id="Vue中的生命周期"><a href="#Vue中的生命周期" class="headerlink" title="Vue中的生命周期"></a>Vue中的生命周期</h3><img src="/2021/11/06/vue/vue2/VUE-Pic/lifecycle.png" style="zoom: 50%;"><h3 id="Vue中一些内置指令"><a href="#Vue中一些内置指令" class="headerlink" title="Vue中一些内置指令"></a>Vue中一些内置指令</h3><p>v-once  该指令后面不需要跟任何表达式，该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</p><p>v-html  该指令后面会跟上一个string类型，会将string的html解析出来并且进行渲染</p><p>v-text  该指令后面跟一个string类型，显示内容，跟插值语法相似 （一般不用）</p><p>v-pre  跳过这个元素和它子元素的编译过程</p><p>v-cloak 该指令后面不需要任何表达式，在vue解析前，div中有一个属性v-cloak，在vue解析后，div中会删去v-cloak。使用css配合v-cloak可以解决网速慢时展示出的问题</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>给标签内属性绑定值 </p><pre class=" language-vue"><code class="language-vue"><img v-bind:src="imgURL" alt=""><!--简写--><img :src="imgURL" alt=""></code></pre><p>给标签添加类名,动态绑定class</p><pre class=" language-vue"><code class="language-vue"><!--{}中，key写类名，value放一个bool值表示是否添加该类到标签中 --><h2 :class = "{active: isActive,line: isLine}">     {{message}}</h2><script>    new Vue({        data:{            message:'你好',            isActive: true,            isLine: false        }    })</sctipt></code></pre><p>给标签提那家style,动态绑定style</p><pre class=" language-vue"><code class="language-vue"><!-- 如果是字符串要加单引号，要不然会去data中找--><h2 :style="{fontSize:'50px'}">    </h2></code></pre><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><pre class=" language-vue"><code class="language-vue"><script>    new Vue({        data:{            message:'你好',            firstName:'张',            lastName:'三'        },        computed:{            fullName(){                return this.firstName + ' ' + this.lastName            },            //完整的计算属性原理            //计算属性一般没有set方法，是一个只读属性            //计算属性只会执行一次，内部有一个缓存，性能比较高            fullName1:{             get: function(){                 return this.firstName + ' ' + this.lastName             }          }        }    })</script></code></pre><h3 id="v-on事件监听"><a href="#v-on事件监听" class="headerlink" title="v-on事件监听"></a>v-on事件监听</h3><p>v-on:click=fn() === @click=fn()  (语法糖，简介书写)</p><p>@click使用时，如果函数不需要额外参数，fn方法后的()可以不加</p><p>如果需要同时传入某个参数，fn需要加上小括号和参数</p><p>注意：如果函数需要一个参数，但是你使用时没有加（）,Vue会默认将浏览器生成的event时间对象作为参数传入到函数中</p><p>手动获取浏览器参数的event对象：参数写 $event</p><p>v-on 修饰符</p><p>@click.stop 阻止事件冒泡，即点击只会触发子类，不会触发父类的事件</p><p>@click.prevent 阻止默认行为 比如表单提交会跳转到另一页面，设置prevent就不会跳转到另一个页面</p><p>@keyup 监听键盘事件，如果想要确定监听某个键，就在@keyup.() 如果监听回车就keyup.enter</p><p>@click.once  点击只触发一次</p><h3 id="v-if、v-else、else-if"><a href="#v-if、v-else、else-if" class="headerlink" title="v-if、v-else、else-if"></a>v-if、v-else、else-if</h3><p>就跟正常的if、else、else if使用类似</p><p>逻辑较多时，else-if不常用，通常用计算属性代替,简化页面，方便书写修改。</p><p>注意：Vue在进行DOM渲染时，处于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。</p><p>如果不希望Vue出现重复利用的问题，添加对应的不同的key就好了</p><h3 id="v-show以及与v-if区别"><a href="#v-show以及与v-if区别" class="headerlink" title="v-show以及与v-if区别"></a>v-show以及与v-if区别</h3><p>v-show与v-if作用类似，可以控制所在元素的显示。</p><p>但是当v-if的条件为false时，所控制的标签元素不会存在dom中，即用开发者工具查看页面元素看不到呢个元素。v-show的条件为false时，只是给元素增加了一个行内样式：display:none，用开发者工具查看页面元素可以看到呢个没有显示的元素。</p><p>通常显示与隐藏切换的很频繁用v-show，只有一次切换用v-if提高性能</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>在数组遍历过程中获取值+索引值（索引值会从0开始）</p><pre class=" language-vue"><code class="language-vue"><li v-for = "(item, index) in Array">    {{index}} -- {{item}}</li></code></pre><p>在对象遍历过程中获取 value+key </p><pre class=" language-vue"><code class="language-vue"><li v-for = "(value, key) in Object">    {{key}} -- {{value}}</li></code></pre><p>在对象遍历过程中获取 value+key+index</p><pre class=" language-vue"><code class="language-vue"><li v-for = "(value, key, index) in Object">     {{index}} -- {{key}} -- {{value}}</li></code></pre><p>通常使用v-for时，会给元素加特定的key , :key=”item”，使性能更高</p><p>修改数组元素做到响应式</p><p>arr[0]=’newItem’这样修改数组元素的值不能做到响应式，页面不会刷新</p><p>可以使用arr.splice(i, 1, ‘newItem’)来改变数组元素的值</p><p>也可以用 Vue.set(arr, i, ‘newItem’)来改变数组元素的值</p><h3 id="v-model以及修饰符"><a href="#v-model以及修饰符" class="headerlink" title="v-model以及修饰符"></a>v-model以及修饰符</h3><p>v-model = ‘ message’  双向绑定  可以理解为 v-bind:value = ‘message’ + v-on:input = ‘fn’   fn(event){ this.message = event.target.value }</p><p>v-model与radio结合使用的时候不需要给radio设置一样的name来点击区别</p><p>v-model与checkbox结合使用单选框对应bool，多选框绑定Array</p><p>v-model与select结合使用 v-model放在select元素中，绑定一个string值，选择多个的话，在元素中加一个multiple，绑定一个Array</p><p>lazy修饰符，让数据在失去焦点或者按下回车时才会更新数据，使用：v-model.lazy =” “</p><p>number修饰符，本来v-model绑定的数据类型会默认定义为string类型，使用model.number=” “  会让绑定的数据为number类型</p><p>trim修饰符,可以自动过滤内容左右两边的空格</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>全局组件：可以在多个vue的实例下使用   使用： Vue.component(‘name’, name)</p><p>局部组件：只能当前vue实例下使用  在vue对象中 Vue({ component：{name}})</p><p>组件内部不能访问Vue实例中的数据</p><p>组件中的data为什么是一个函数？</p><p>因为如果不是一个函数返回一个对象的话，直接把data定义为对象时，多个组件会共用这个data对象，当该组件对象数据改变时，多个组件都会发生改变，为了防止这一现象发生，让每个组件单独有自己的对象，data就要定义为一个函数，这时返回的都是新的对象</p><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>父组件向子组件传递数据用 props 子组件向父组件传递数据用自定义事件</p><p>父传子：父组件如果用v-bind 那么会把绑定的数据传给子组件，如果不用v-bind，会把后面的字符串传递给子组件(基本不用)，子组件用props接收数据</p><p>props接收写法：1.用数组props:[‘name1’,’name2’]  </p><p>2.用对象类型限制props:{name1:Array, name2: String }</p><p>3对象限制+提供默认值 props:{ name1:{ type:Array, default(){ return [] } , require: true }, name2:{type: String, defalut: ‘asd’} }注意：类型是对象或者数组时，默认值必须是一个函数</p><p>注意：html页面中父组件给子组件传递值时，绑定的不能是驼峰标识，要用-连接，比如myHomeMessage 要写成 my-home-message,但是可以全小写</p><p>子传父：用自定义事件， 子组件中 标签元素中@click=”fn(item)” ,  methods中 写 fn(item){this.$emit(‘触发的事件名’，item)} 父组件中 标签元素中@触发的事件名=”fn2”   methods中写 fn2(item){ ……….}</p><h3 id="Watch数据监听"><a href="#Watch数据监听" class="headerlink" title="Watch数据监听"></a>Watch数据监听</h3><pre class=" language-vue"><code class="language-vue"><script>    watch:{        data1(oldValue,newValue){            .......        }    }</script></code></pre><h3 id="通过-children-和-refs访问子组件"><a href="#通过-children-和-refs访问子组件" class="headerlink" title="通过$children 和$refs访问子组件"></a>通过$children 和$refs访问子组件</h3><p>$chilidren用的少，主要使用$refs  在标签元素中 绑定 ref=”组件名”  使用 $refs进行访问 </p><h3 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h3><p>默认插槽</p><p>在子组件中使用<slot></slot>  在父组件中使用子组件时，在子组件中写一些标签元素，slot使这些标签元素替换自己显示在页面中</p><p>具名插槽</p><p>在子组件中slot 绑定一个name属性 ，在父组件使用子组件时，插入的标签元素绑定slot属性，后面的名字和slot的name属性名字相同，这样就会替换特定的插槽</p><p>作用域插槽</p><p>将子组件中的数据交给父组件，父组件通过操作替换子组件slot ，在父组件使用中使用<template scope="name"> </template> name将会获取子组件中传来的数据，在里面使用只需用name.xxx即可，xxx是子组件绑定的属性名</p><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>打包工具， 将一些浏览器不支持的文件打包转变成浏览器可以支持的，让我们能够进行模块化开发，并且能帮助我们处理模块间的依赖关系。</p><p>webpack与gulp的对比，gulp的核心是Task，我们配置一系列task，定义要处理的事物(scss转css,图片压缩等),gulp执行这些task，让整个流程自动化，gulp也称前端自动化任务管理工具。如果工程模块依赖简单，没有用到模块化，只需要简单的合并、压缩就可以用gulp。</p><p>gulp强调前端流程自动化，webpack强调模块化开发管理，文件压缩合并，预处理等是他附带的功能。</p><p>本地安装 ：npm i  webpack -D </p><p>webpack.config.js来配置webpack</p><p>loader 来加载css、图片，将一些高级es6-&gt;es5等</p><p>使用：用npm安装需要的对应的loader，在webpack.config.js中的module下进行配置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//打包入口文件</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//生成文件</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>，<span class="token comment" spellcheck="true">//目录 ，resolve把当前目录解析为绝对路径</span>        filename<span class="token punctuation">:</span><span class="token string">'xxxx.js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//输出文件</span>        publicPath<span class="token punctuation">:</span> <span class="token string">'dist/'</span> <span class="token comment" spellcheck="true">//涉及到url的代码，都会在前面加上这个路径,如果使用下面的html插件就不用写这句话了</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//正则表达式</span>                <span class="token comment" spellcheck="true">//css-loader只负责将css文件进行加载</span>                <span class="token comment" spellcheck="true">//style-loader负责将样式添加到DOM中</span>                <span class="token comment" spellcheck="true">//使用多个loader时，处理是从右向左进行的</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//顺序不能乱</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">'less-loader'</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif|jpeg)$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//当加载图片小于limit时，会将图片编译成base64字符串形式，当加载图片大于limit时，需要使用file-loader模块进行加载，将图片重新加载到dist文件夹下</span>                        limit<span class="token punctuation">:</span><span class="token number">8192</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span> <span class="token comment" spellcheck="true">//[name]会保留图片之前的名字,hash:8为了让图片不重名</span>                    <span class="token punctuation">}</span>                          <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.m?js$/</span><span class="token punctuation">,</span>                exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules)|bower_components)/</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//排除这些文件</span>                use<span class="token punctuation">:</span><span class="token punctuation">{</span>                     loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>loader和plugin的区别 </p><p>loader主要用于转换某些类型的模块，plugin是对webpack本身的扩展</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token keyword">export</span><span class="token operator">=</span><span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//添加版权插件</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'最终版权归xxx所有'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//打包html插件到dist文件中,并且将打包的js文件自动通过script标签插入到body中</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'index.html'</span> <span class="token comment" spellcheck="true">//template表示根据什么模板来生成index.html</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//js压缩插件</span>        <span class="token keyword">new</span> <span class="token class-name">uglifyjsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="Vue中template和el的关系"><a href="#Vue中template和el的关系" class="headerlink" title="Vue中template和el的关系"></a>Vue中template和el的关系</h3><p>开发中，如果Vue实例中 既有 el，又有template，那么在Vue的解析中，template中的标签元素会替代el绑定根元素</p><h3 id="vue-cli-3-与-2-版本区别"><a href="#vue-cli-3-与-2-版本区别" class="headerlink" title="vue-cli 3 与 2 版本区别"></a>vue-cli 3 与 2 版本区别</h3><p>vue-cli3是基于webpack4 打造，vue-cli是webpack3</p><p>vue-cli3设计原则：0配置，移除了根目录下的build和config等配置文件目录</p><p>vue-cli3提供了vue ui命令，可视化配置</p><p>移除了static文件夹，增加了public文件夹，并且index.html移动到了public</p><p>vue-cli2初始化项目：vue init webpack xxxx</p><p>vue-cli3初始化项目 ：vue create xxxx</p><h3 id="前端渲染和后端渲染"><a href="#前端渲染和后端渲染" class="headerlink" title="前端渲染和后端渲染"></a>前端渲染和后端渲染</h3><p>后端渲染：服务器直接生产渲染好对应的HTML页面返回给客户端进行展示</p><p>后端路由：后端处理URL和页面之间的映射关系，缺点：整个页面的模块由后端人员来编写和维护。前端开发人员如果要开发页面，需要使用PHP和Java等语言来编写页面代码。HTML代码和数据以及对应的逻辑混在一起，使编写和维护十分糟糕。</p><p>前后端分离：随着Ajax的出现，有了前后端分离的开发模式。后端只提供API来返回数据，前端通过Ajax获取数据，通过js将数据渲染到页面中</p><p>前端渲染：浏览器中显示的网页中的大部分内容都由前端写的js代码在浏览器中执行，最后渲染在页面上</p><p>前端路由：静态资源服务器只有一整套的index.html+css+js，前端路由通过生成url去下载好的静态资源中找对应的html+css+js</p><p>SPA页面：单页面富应用，整个网页只有一个html页面，在前后端分离的基础上加了一层前端路由</p><h3 id="如何改变页面url地址而不使页面刷新"><a href="#如何改变页面url地址而不使页面刷新" class="headerlink" title="如何改变页面url地址而不使页面刷新"></a>如何改变页面url地址而不使页面刷新</h3><p>harh模式</p><p>1.通过location.hash = ‘xxxxx’  </p><p>history模式</p><p>2.通过history.pushState( {}, ‘’, ‘xxxx’)  这个操作类似于栈的操作，push和back</p><p>3.通过history.replaceState( {},’’ ‘xxxx’ )  替换，不能点回退键</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_树_js-笔记</title>
      <link href="/2021/11/06/shu-ju-jie-gou/tree/"/>
      <url>/2021/11/06/shu-ju-jie-gou/tree/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树中的节点最多只能有两个子节点，一个左侧子节点，一个右侧子节点。</p><p>二叉搜索树(BST)是二叉树的一种，但是它只允许你在左侧节点存储比父节点小的值，在右侧节点存储大于或等于父节点的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建二叉搜索树</span><span class="token keyword">function</span> <span class="token function">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> Node <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> root <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">//返回根节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getHead <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> root    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归插入节点操作</span>    <span class="token keyword">var</span> insertNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向树中插入一个新的键</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root <span class="token operator">=</span> newNode        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">insertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//树的中序遍历递归</span>    <span class="token keyword">var</span> inOrderTraverseNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>            <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对根节点进行的操作</span>            <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//中序遍历,以上行顺序访问BST所有节点的遍历方式，即从最小到最大的顺序遍历所有节点，callback为我们对遍历到的每个结点进行的操作</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inOrderTraverse <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//树的先序遍历递归</span>    <span class="token keyword">var</span> preOrderTraverseNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对根节点进行操作</span>            <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>            <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先序遍历,先访问节点本身，然后再访问它的左侧子节点，最后是右侧子节点。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>preOrderTraverse <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//树的后续遍历递归</span>    <span class="token keyword">var</span> postOrderTraverseNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>            <span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>                                         <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对根节点进行操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//后序遍历，先访问节点的后代节点，再访问节点本身。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>postOrderTraverse <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//寻找树中最小的值</span>    <span class="token keyword">var</span> minNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left            <span class="token punctuation">}</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>key        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">minNode</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//寻找树中最大的值</span>    <span class="token keyword">var</span> maxNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>right            <span class="token punctuation">}</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>key        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">maxNode</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//树的搜索递归实现</span>    <span class="token keyword">var</span> searchNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//搜索一个特定的值，找得到返回true，否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">serachNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//树的删除节点递归实现</span>    <span class="token keyword">var</span> removeNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> node        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> node        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//开始删除操作</span>            <span class="token comment" spellcheck="true">//删除的节点没有子节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> <span class="token keyword">null</span>                <span class="token keyword">return</span> node            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除的节点没有左子节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>right                <span class="token keyword">return</span> node            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除的节点没有右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left                <span class="token keyword">return</span> node            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除的节点有两个子节点</span>            <span class="token keyword">var</span> findMinNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    node <span class="token operator">=</span> node<span class="token punctuation">.</span>left                <span class="token punctuation">}</span>                <span class="token keyword">return</span> node            <span class="token punctuation">}</span>            <span class="token keyword">var</span> aux <span class="token operator">=</span> <span class="token function">findMinNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>key <span class="token operator">=</span> aux<span class="token punctuation">.</span>key            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> aux<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为了改变替换的节点的指向</span>            <span class="token keyword">return</span> node        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除一个节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">removeNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//操作一下</span><span class="token keyword">var</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Node</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">getArr1</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>tree<span class="token punctuation">.</span><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>getArr1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 25]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">getArr2</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>tree<span class="token punctuation">.</span><span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>getArr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[11, 7, 5, 3, 6, 9, 8, 10, 15, 13, 12, 14, 20, 18, 25]</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">getArr4</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>tree<span class="token punctuation">.</span><span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>getArr4<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[3, 6, 5, 8, 10, 9, 7, 12, 14, 13, 18, 25, 20, 15, 11]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_栈_js-笔记</title>
      <link href="/2021/11/06/shu-ju-jie-gou/stack/"/>
      <url>/2021/11/06/shu-ju-jie-gou/stack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种遵循后进先出(LIFO)原则的有序集合。新添加的或等待删除的元素都保存在栈的末尾，称作栈顶，最后删除的元素所处位置，称作栈底。在栈里，新元素靠近栈顶，旧元素接近栈底。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//栈的创建</span><span class="token comment" spellcheck="true">//声明类</span><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//初始化栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> arr     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加新元素到栈顶</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除栈顶的元素，同时返回被移除的元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回栈顶元素，但不会移除栈顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>peek <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span>items<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果栈里没有任务元素就返回true，否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回栈里元素的个数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例:</span><span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1 2 3 4 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1 2 3 4</span>stack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="实例：X进制计算器"><a href="#实例：X进制计算器" class="headerlink" title="实例：X进制计算器"></a>实例：X进制计算器</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">baseConverter</span><span class="token punctuation">(</span>decNumber<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> remStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        rem<span class="token punctuation">,</span>        baseString <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>        digits <span class="token operator">=</span> <span class="token string">'0123456789ABCDEF'</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rem <span class="token operator">=</span> decNumber <span class="token operator">%</span> base        remStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>        decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber<span class="token operator">/</span>base<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>remStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        baseString <span class="token operator">+</span><span class="token operator">=</span> digits<span class="token punctuation">[</span>remStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> baseString<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">baseConverter</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1111111111111111</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">baseConverter</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//177777</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">baseConverter</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//FFFF</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_集合_js-笔记</title>
      <link href="/2021/11/06/shu-ju-jie-gou/set/"/>
      <url>/2021/11/06/shu-ju-jie-gou/set/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合是一组无序且唯一(不能重复)的项组成的。这个数据结构使用了与有限集合相同的数学概念</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个集合</span><span class="token keyword">function</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//这里用对象来实现集合，也可以用数组来实现</span>    <span class="token comment" spellcheck="true">//如果值在集合中，返回true，否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>has <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//hasOwnProperty这个方法返回一个表明对象是否具有特定属性的布尔值</span>           <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//return value in items</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向集合添加一个新的项</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            items<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> value            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从集合移除一个值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">delete</span> items<span class="token punctuation">[</span>value<span class="token punctuation">]</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除集合中所有项</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回集合所包含的元素的数量</span>    <span class="token comment" spellcheck="true">//三种方法：一是使用一个length变量，对集合元素进行操作时，改变length属性。二是使用Object类的一个内建函数。三是手动提取items对象的每个属性，记录属性的个数并返回这个数。</span>    <span class="token comment" spellcheck="true">//方法二</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">//Objects.keys()返回一个包含给定对象所有属性的数组</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法三</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//因为对象的原型包含了额外的属性，该属性可能继承一些对象，所以不能是简单的count++，必须严格是items对象的私有属性</span>                count<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回一个包含集合中所有值的数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//法二</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//集合操作</span>    <span class="token comment" spellcheck="true">//并集</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>union <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回的新的集合</span>                <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        values <span class="token operator">=</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> unionSet    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//交集</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>intersection <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intersectionSet    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//差集</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>difference <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> differenceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                differenceSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> differenceSet    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子集,判断该集合是不是另一集合的子集，如果是则返回true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subSet <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> otherSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用Set类</span><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['1','2','3']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//3</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['1','3']</span><span class="token comment" spellcheck="true">//使用集合操作</span><span class="token keyword">var</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['1', '2', '3']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['1', '2']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">subSet</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token boolean">true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_队列_js-笔记</title>
      <link href="/2021/11/06/shu-ju-jie-gou/queue/"/>
      <url>/2021/11/06/shu-ju-jie-gou/queue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-队列"><a href="#1-队列" class="headerlink" title="1. 队列"></a>1. 队列</h3><p>队列是遵循FIFO(先进先出)原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加得元素在队列的末尾。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建队列</span><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> arr    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向队列尾部添加一个新的项</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enqueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除队列的第一项，并返回被移除的元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dequeue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列中第一个元素，队列不做任何变动</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断队列是否为空队列，空队列返回true,否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列的元素个数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运用示例：</span><span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-优先队列"><a href="#2-优先队列" class="headerlink" title="2. 优先队列"></a>2. 优先队列</h3><p>元素的添加和移除是基于优先级的。实现一个优先队列，两种选项：</p><p>①设置优先级，然后在正确的位置添加元素。</p><p>②用入列操作添加元素，然后按照优先级移除它们。 这里为在正确的位置添加元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> PriorityQueue <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> arr    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向队列尾部添加一个新的项</span>    <span class="token keyword">function</span> QueueElement <span class="token punctuation">(</span>element<span class="token punctuation">,</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element        <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enqueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">,</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> priority<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> added <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">.</span>priority <span class="token operator">&lt;</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//左边优先级低，右边优先级高</span>                    items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>queueElement<span class="token punctuation">)</span>                    added <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>added<span class="token punctuation">)</span><span class="token punctuation">{</span>                items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除队列的第一项，并返回被移除的元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dequeue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列中第一个元素，队列不做任何变动</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断队列是否为空队列，空队列返回true,否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列的元素个数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="3-循环队列-击鼓传花（约瑟夫环）"><a href="#3-循环队列-击鼓传花（约瑟夫环）" class="headerlink" title="3.循环队列-击鼓传花（约瑟夫环）"></a>3.循环队列-击鼓传花（约瑟夫环）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> hotPotato <span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//选手入场</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> eliminated <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">//记录被淘汰者的名字</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//先出的循环进入队列尾部</span>            <span class="token punctuation">}</span>        eliminated <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eliminated <span class="token operator">+</span> <span class="token string">'在击鼓传花游戏中被淘汰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">var</span> winner <span class="token operator">=</span> <span class="token function">hotPotato</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'胜利者：'</span> <span class="token operator">+</span> winner<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_图_js-笔记</title>
      <link href="/2021/11/04/shu-ju-jie-gou/chart/"/>
      <url>/2021/11/04/shu-ju-jie-gou/chart/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图是一组由边连接的节点。</p><p><img src="/2021/11/04/shu-ju-jie-gou/chart/Chart/chart1.png"></p><p>图的相关概念：<br>由一条边连接在一起的顶点称为相邻顶点。</p><p>一个顶点的度是其相邻顶点的数量。<br>路径是顶点v1,v2,….vk的一个连续序列。途中包含路径：A B E I 和 A C D G</p><p>简单路径：要求不包含重复的顶点。</p><p>若图中不存在环，则称图是无环的。如果图中每两个顶点间都存在路径，则图是连通的。</p><p>有向图</p><p><img src="/2021/11/04/shu-ju-jie-gou/chart/Chart/chart2.png"></p><p>如果图中每两个顶点间都在双向上都存在路径，则图是强连通的。</p><p>图的表示：邻接矩阵、邻接表、关联矩阵。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建图类，可以看作是一个邻接表</span><span class="token keyword">function</span> <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用数组来存储图中所有顶点的名字</span>    <span class="token keyword">var</span> vertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//用字典来存储邻接表，字典用顶点的名字作键，邻接顶点列表作为值</span>    <span class="token keyword">var</span> adjList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//向图中添加一个新的顶点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>addVertex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>        vertices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        adjList<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加两个顶点之间的边，无向图</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>addEdge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>        adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>        adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//控制台输出</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//遍历节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s <span class="token operator">+</span><span class="token operator">=</span> vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'->'</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历此节点中的边</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s <span class="token operator">+</span><span class="token operator">=</span> neighbors<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试一下</span><span class="token keyword">var</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> myVertices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myVertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    graph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>myVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/11/04/shu-ju-jie-gou/chart/chart/chart3.jpg"></p><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>算法思想：必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索。</p><p>完全搜索一个顶点要求我们查看该顶点的每一条边。对于每一条边所连接的没有被访问过的顶点，将其标标注为被发现的，并将其加进待访问顶点列表中。</p><p>深度优先搜索 (dfs)  运用的数据结构为栈   思想：通过将顶点存入栈中、顶点是沿着路径被探索的，存在新的相邻顶点就去访问。</p><p>广度优先探索(bfs)  运用的数据结构为队列   思想：通过将顶点存储队列中，最先入列的顶点先被探索</p><p>颜色状态： 白色： 顶点还没被访问  灰色：顶点被访问过，但未被探索过  黑色：顶点被访问过且被完全探索过</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//初始化状态</span><span class="token keyword">var</span> initializeColor <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        color<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'white'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> color<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//深度优先算法实现</span><span class="token keyword">this</span><span class="token punctuation">.</span>dfs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dfsVisit</span><span class="token punctuation">(</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//递归遍历此节点的邻接节点</span><span class="token keyword">var</span> dfsVisit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>color<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span> <span class="token comment" spellcheck="true">//被访问过，但未被搜索过</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">var</span> w <span class="token operator">=</span> neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">' white'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dfsVisit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> color<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//广度优先算法实现</span><span class="token keyword">this</span><span class="token punctuation">.</span>bfs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//节点入列</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> w <span class="token operator">=</span> neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span>                queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">'black'</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dfs测试</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['A','B','C','D','E','F','G']</span><span class="token comment" spellcheck="true">//bfs测试</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>graph<span class="token punctuation">.</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span>fn2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//['A','B','C','D','E','F','G']</span></code></pre><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><p>使用BFS寻找最短路径。给定一个图和源顶点v，找出每个顶点u和v之间的最短路径距离</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>BFS <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v到u的距离为d[u]，前溯点为pred[u]，借助他来推导出从v到其他每个顶点u的最短路径</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//初始化距离以及前溯点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        d<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        pred<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> w <span class="token operator">=</span> neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span>                d<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">1</span>                pred<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> u                queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>distances<span class="token punctuation">:</span>d<span class="token punctuation">,</span> predecessors<span class="token punctuation">:</span>pred <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试，执行BFS</span><span class="token keyword">var</span> shortestPathA <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">BFS</span><span class="token punctuation">(</span>myVertices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shortestPathA<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{distances:[A:0, B:1, C:1, D:2, E:2 , F:2, G:3, H:3]  predecessors:[A:null, B:'A', C:'A', D:'C', E:'B' , F:'B', G:'D', H:'D']}</span><span class="token comment" spellcheck="true">//借助前溯点数组，构建从顶点A到其他顶点的路径</span><span class="token keyword">var</span> fromVertex <span class="token operator">=</span> myVertices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> myVertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> toVertex <span class="token operator">=</span> myVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//回溯，从尾点到顶点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token operator">=</span> toVertex<span class="token punctuation">;</span> v <span class="token operator">!==</span> fromVertex<span class="token punctuation">;</span> v <span class="token operator">=</span> shortestPathA<span class="token punctuation">.</span>predecessors<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fromVertex<span class="token punctuation">)</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' - '</span> <span class="token operator">+</span>path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出见下</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/11/04/shu-ju-jie-gou/chart/Chart/chart4.png"></p><p>使用DFS构建”森林”(有限树的一个集合)以及一组源顶点(根),返回两个数组：发现时间和完成探索世界</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">this</span><span class="token punctuation">.</span>DFS <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//d表示发现时间，f表示此节点搜索完成时间，p表示前溯点</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token function">initializeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    time <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">//初始化</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        d<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        p<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vertices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">DFSVisit</span><span class="token punctuation">(</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token punctuation">,</span>d<span class="token punctuation">,</span>f<span class="token punctuation">,</span>p<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> discovery<span class="token punctuation">:</span>d<span class="token punctuation">,</span> finished<span class="token punctuation">:</span>f<span class="token punctuation">,</span> predecessors<span class="token punctuation">:</span> p<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> DFSVisit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> color<span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'discovered'</span><span class="token operator">+</span> u<span class="token punctuation">)</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span>    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time    <span class="token keyword">var</span> neighbors <span class="token operator">=</span> adjList<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>neighbors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> w <span class="token operator">=</span> neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> u            <span class="token function">DFSVisit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>color<span class="token punctuation">,</span>d<span class="token punctuation">,</span>f<span class="token punctuation">,</span>p<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'explored'</span><span class="token operator">+</span>u<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试，执行DFS</span><span class="token keyword">var</span> obj <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">DFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入见下</span></code></pre><p><img src="/2021/11/04/shu-ju-jie-gou/chart/Chart/chart5.png"></p><p><img src="/2021/11/04/shu-ju-jie-gou/chart/Chart/chart6.png"></p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>当我们需要编排一些任务或步骤的执行顺序时，称为拓扑排序。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//利用DFS执行存入的变量obj</span><span class="token comment" spellcheck="true">//这里用深拷贝不去改变 返回的对象中的东西，不用也没事</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newObj <span class="token operator">=</span> obj<span class="token punctuation">.</span>push <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token keyword">let</span> finishedTime <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>finished<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//交换key与value,对象中自动帮我们排好序，方便我们打印</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> finishedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> finishedTime<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    finishedTime<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> k    <span class="token keyword">delete</span> finishedTime<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//转为字符串开始打印</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> finishedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res <span class="token operator">+</span><span class="token operator">=</span> finishedTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'  '</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//E F B G H D C A 拓扑排序结果，但拓扑排序实际上不只一种</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_字典和散列表_js-笔记</title>
      <link href="/2021/10/30/shu-ju-jie-gou/dicandsan/"/>
      <url>/2021/10/30/shu-ju-jie-gou/dicandsan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>在字典中，存储的是[键，值]对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式来存储元素，字典则是以[键，值]的形式来存储元素。字典也称作映射。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个字典</span><span class="token keyword">function</span> <span class="token function">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果某个键值存在于这个字典中，则返回true，否则返回false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>has <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token keyword">in</span> items    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向字典中添加新元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//传入键值来从字典中移除对应的键值对</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">delete</span> items<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过键值来查找特定的数值并返回</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">:</span> undefined     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将字典所包含的所有数值以数组的形式返回</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空字典集</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回字典所包含元素的数量</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将字典所包含的所有键名以数组形式返回</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getItems <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> items    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用Dictionary</span><span class="token keyword">var</span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dictionary<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'xlz'</span><span class="token punctuation">,</span><span class="token string">'xiaolan'</span><span class="token punctuation">)</span>dictionary<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'xiaolan'</span><span class="token punctuation">,</span><span class="token string">'1223'</span><span class="token punctuation">)</span>dictionary<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">,</span><span class="token string">'joy'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{xlz:'xiaolan',xiaolan:'1223',qqq:'joy'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'xlz'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['xlz','xiaolan','qqq']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['xiaolan','1223','joy']</span>dictionary<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{xlz:'xiaolan',xiaolan:'1223'}</span></code></pre><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>散列算法：尽可能快地在数据结构中找到一个值。</p><p>如果使用散列函数，就知道值得具体位置，因此能够快速检索到该值。散列函数的作用是给定一个键值，返回值在表中的地址。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个散列表</span><span class="token keyword">function</span> <span class="token function">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//实现散列函数</span>    <span class="token keyword">var</span> loseloseHashCode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            hash <span class="token operator">+</span><span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//charCodeAt找到每个字符对应的ASCII值</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hash <span class="token operator">%</span> <span class="token number">37</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向散列表中增加一个新的项</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>put <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>        table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据键值查找特定的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> table<span class="token punctuation">[</span><span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据键值从散列表中移除值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        table<span class="token punctuation">[</span><span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用 HashTable类</span><span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'xlz'</span><span class="token punctuation">,</span> <span class="token string">'xiaolan'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//17-xlz</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'xiaolan'</span><span class="token punctuation">,</span> <span class="token string">'1223'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//8-xiaolan</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">,</span> <span class="token string">'joy'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//6-qqq</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'xlz'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//xiaolan</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//joy</span>hash<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'qqq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre><p>有时候，一些键会有相同的散列值。不同的值在散列表中对应相同位置的时候，称为冲突。</p><p>产生冲突时，相同散列值后插入的键值会覆盖前面前插入的，散列表中最终储存的是后插入的。处理冲突的方法：分离链接、线性探查、双散列法</p><p>1.分离链接：为散列表中的每一个位置创建一个链表并将元素存储在里面。缺点：需要额外的存储空间</p><p><img src="/2021/10/30/shu-ju-jie-gou/dicandsan/sanliebiao/a.png"></p><p>为了实现分离链接，在HashTable中添加一个辅助类来表示将要加入LinkedList实例的元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ValuePair <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">']'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//put的改写，在分离链接中,put将改写为</span><span class="token keyword">this</span><span class="token punctuation">.</span>put <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果散列表该位置为空，则为其创建链表</span>        table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValuePair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get的改写</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>element<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>  current<span class="token punctuation">.</span>element<span class="token punctuation">.</span>value            <span class="token punctuation">}</span>                       current <span class="token operator">=</span> current<span class="token punctuation">.</span>next                   <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> undefined<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//remove的改写</span><span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>element<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>                table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>element<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> undefined                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将每个位置的链表转化为数组并打印</span><span class="token keyword">this</span><span class="token punctuation">.</span>print <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> table<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Gandalf'</span><span class="token punctuation">,</span> <span class="token string">'gandalf@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'johnsnow@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Tyrion'</span><span class="token punctuation">,</span> <span class="token string">'tyrion@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Aaron'</span><span class="token punctuation">,</span> <span class="token string">'aaron@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Donnie'</span><span class="token punctuation">,</span> <span class="token string">'donnie@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Ana'</span><span class="token punctuation">,</span> <span class="token string">'ana@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Jonathan'</span><span class="token punctuation">,</span> <span class="token string">'jonathan@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Jamie'</span><span class="token punctuation">,</span> <span class="token string">'jamie@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Sue'</span><span class="token punctuation">,</span> <span class="token string">'sue@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Mindy'</span><span class="token punctuation">,</span> <span class="token string">'mindy@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token string">'paul@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'Nathan'</span><span class="token punctuation">,</span> <span class="token string">'nathan@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打印结果如下</span></code></pre><p><img src="/2021/10/30/shu-ju-jie-gou/dicandsan/sanliebiao/b.png"></p><p>2.线性探查。当向表中某个位置加入一个新元素时，如果索引为index的位置已经被占据了，就尝试index+1的位置。如果index+1的位置也被占了，就向后以此类推</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ValuePair <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">']'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//put的改写</span><span class="token keyword">this</span><span class="token punctuation">.</span>put <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined <span class="token punctuation">)</span><span class="token punctuation">{</span>        position<span class="token operator">++</span>    <span class="token punctuation">}</span>        table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValuePair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get的改写</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>talbe<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> table<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">++</span>position            <span class="token keyword">while</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> undefined <span class="token operator">||</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> undefined<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//remove和get方法基本相同</span><span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token function">loseloseHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>talbe<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>            table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> undefined        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">++</span>position            <span class="token keyword">while</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> undefined <span class="token operator">||</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>               table<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> undefined            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> undefined<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html+css-面试题学习笔记</title>
      <link href="/2021/10/26/html-css/html-css-mianshi/"/>
      <url>/2021/10/26/html-css/html-css-mianshi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-BFC"><a href="#1-BFC" class="headerlink" title="1.BFC"></a>1.BFC</h3><p>BFC：块级格式化上下文，指一个独立的块级渲染区域。只有display为block的元素参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。</p><p>如何创建BFC：</p><p>方法1：float的值不是none</p><p>方法2：position的值不是static或者relative</p><p>方法3：display的值为inline-block、flex或者inline-flex </p><p>方法4：overflow: hidden</p><p>如下所示，如果不给父盒子设置上述条件，因为子盒子都增加了浮动，所以父盒子不会因为子盒子的高度而被撑开，即父盒子没有高度。如果加上上述条件中的一个，则父子会拥有一个被子盒子高度撑开的高度。</p><p><strong>最好的办法是 overflow :hidden</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>BFC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* float: left;            position: absolute;            display: inline-block; */</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> cadetblue<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>BFC的作用</p><p>作用1：可以取消盒子margin塌陷</p><p>如下所示，给子盒子设置一个margin-top值，父盒子会因为子盒子的margin-top而与上面元素产生一段margin-top值的距离，这就称为margin塌陷，同时子盒子不会产生margin-top的值在父盒子内。</p><p>解决办法：产生BFC，设置overflow：hidden</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>BFC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.father</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* overflow: hidden; */</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.son</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>作用2：阻止浮动元素被覆盖</p><p>如果子盒子最后一个盒子因为没设置浮动，所以会被上面浮动的子盒子覆盖。</p><p>解决办法：让没有浮动的盒子产生BFC，即对其设置overflow：hidden，他就会自身成为一个独立的区域，与区域外部无关</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>BFC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.son</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> darkorchid<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.son-last</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> darkslategrey<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* overflow: hidden; */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son-last<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html+css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html+css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-面试题学习笔记</title>
      <link href="/2021/10/19/javascript/js-mianshi/"/>
      <url>/2021/10/19/javascript/js-mianshi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1.预编译"></a>1.预编译</h3><p>规律一：任何变量，如果未经声明就赋值，此变量是属于 window 的属性，而且不会做变量提升。（注意，无论在哪个作用域内赋值）</p><p>比如说，如果我们直接在代码里写 <code>console.log(a)</code>，这肯定会报错的，提示找不到 <code>a</code>。但如果直接写 <code>a = 100</code>，这就不会报错，此时，这个 <code>a</code> 就是 <code>window.a</code></p><p>规律二：一切声明的全局变量，全是window的属性。（注意，是全局作用域内声明的全局变量，不是局部变量）</p><p>比如说，当我定义 <code>var a = 200</code> 时，此时这个 <code>a</code> 就是 <code>window.a</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//function a(){ }</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//123</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//function c(){ }</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> d<span class="token operator">=</span><span class="token number">654</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//function (){ }</span>    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//function c(){ }</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>预编译做法：<span class="token number">1</span><span class="token punctuation">.</span>创建AO对象 <span class="token number">2</span><span class="token punctuation">.</span>找形参和变量的声明，作为AO对象的属性名，值为undefined <span class="token number">3</span><span class="token punctuation">.</span>实参和形参相统一<span class="token number">4</span><span class="token punctuation">.</span>找函数声明，会覆盖变量的声明AO：<span class="token punctuation">{</span>    a<span class="token punctuation">:</span>undefined <span class="token number">1</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    c<span class="token punctuation">:</span>undefined <span class="token number">2</span> <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    d<span class="token punctuation">:</span>undefined    b<span class="token punctuation">:</span>undefined<span class="token punctuation">}</span>预编译后函数按执行顺序开始执行</code></pre><h3 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h3><h4 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1.全局作用域"></a>1.全局作用域</h4><p>（1）全局作用域在页面打开时被创建，关闭时被销毁</p><p>（2）编写script标签中的变量和函数，作用域为全局，在页面任意位置都可以访问到</p><p>（3）在全局作用域中有全局对象window，由浏览器创建，可以直接调用</p><p>（4）全局作用域中声明的变量和函数会作为window对象的属性和方法保存</p><h4 id="2-函数作用域"><a href="#2-函数作用域" class="headerlink" title="2.函数作用域"></a>2.函数作用域</h4><p>（1）调用函数时，函数作用域被创建，调用结束后被销毁</p><p>（2）每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的</p><p>（3）在函数作用域中可以访问全局作用域的变量，在函数外无法访问函数作用域中的变量</p><p>（4）在函数作用域中访问变量、函数时，会先在自身作用域中寻找，没找到的话回到函数的上一级作用域去寻找，直到全局作用域</p><p>作用域—先预编译，参照  前面所讲的1.预编译</p><h3 id="3-哪些操作会造成内存泄漏？"><a href="#3-哪些操作会造成内存泄漏？" class="headerlink" title="3.哪些操作会造成内存泄漏？"></a><strong>3.哪些操作会造成内存泄漏？</strong></h3><p>1.闭包</p><p>2.意外的全局变量</p><p>3.没被清除的定时器</p><p>4.脱离dom的引用 ：获取了dom元素，dom在页面中被清楚了，但这个引用依然存在</p><h3 id="4-闭包以及单例模式"><a href="#4-闭包以及单例模式" class="headerlink" title="4.闭包以及单例模式"></a><strong>4.闭包以及单例模式</strong></h3><p>概念：一个普通函数function，如果他可以访问外层作用域的自由变量，这个函数就是一个闭包</p><p>广义：JavaScript中的函数都是闭包</p><p>狭义：JavaScript中的一个函数，如果访问了外层作用域的变量，那么它是一个闭包</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> aa<span class="token operator">=</span> <span class="token number">666</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义函数a，生成函数a外的作用域链</span>   <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token number">123</span>   <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">var</span> bb <span class="token operator">=</span> <span class="token number">231</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> res<span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行函数a，产生函数a内的作用域链，函数a中定义函数b，即函数b产生函数b外的作用域链，被保存在了内存中，</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出123 虽然函数a的作用域链被销毁了，但函数a返回函数b，函数b外的作用域链保存在了内存中，这里执行了函数b，函数b随之产生函数b内的作用域链，因为函数b中未定义aa，所以返回上一级作用域链去查找aa，aa=123，输出123；若函数a中未定义aa，则再返回上一级作用域链中查找aa，直到返回到全局作用域链中查找aa，这里输出666</span><span class="token comment" spellcheck="true">//es5单例模式，body中有一个&lt;button id="button">登陆&lt;/button></span><span class="token keyword">var</span> createLogin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>     div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'123456'</span>     document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>     <span class="token keyword">return</span> div <span class="token punctuation">}</span> <span class="token keyword">var</span> getSingle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> result<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> result <span class="token operator">||</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> create <span class="token operator">=</span> <span class="token function">getSingle</span><span class="token punctuation">(</span>createLogin<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> loginLay <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     loginLay<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//点击登陆，会出现一次123456，再次点击不会产生变化</span><span class="token comment" spellcheck="true">//es6,class类来实现单例模式,不会用到闭包</span><span class="token comment" spellcheck="true">//静态方法 static</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//hello</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo.classMethod is not a function</span><span class="token comment" spellcheck="true">//实现单例</span><span class="token keyword">class</span> <span class="token class-name">xiaoLan</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xiaoLan</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> xiaolan <span class="token operator">=</span> xiaoLan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'小蓝'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token keyword">let</span> xiaolan1 <span class="token operator">=</span> xiaoLan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'小蓝'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaolan<span class="token operator">===</span>xiaolan1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="5-arguments对象"><a href="#5-arguments对象" class="headerlink" title="5. arguments对象"></a>5. arguments对象</h3><p>arguments是一个对应于传递给函数的参数的 类数组对象</p><p>类数组对象：长得像数组，本质是一个对象类型</p><p>有数组的特性：有length属性，可以通过index索引来访问</p><p>没有数组的一些方法：没有forEach、map、filter、reduce等方法</p><p>常见的对arguments的操作有三个：</p><p>1.获取参数的长度</p><p>2.根据索引值获取某一个参数</p><p>3.callee获取当前arguments所在的函数 (用的少)</p><p>注意：①箭头函数中没有arguments对象，运用的话会去上层作用域找  ② nodejs 全局有arguments (因为一个js文件会被当成一个模块，这个模块会被包裹到一个函数里面，然后会去执行这个函数 ) ，全局window中没有arguments  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Arguments(3)</span>    console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3</span>    console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3</span>    console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//f(){    console.log(arguments)等等等}</span><span class="token punctuation">}</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//转化成数组</span><span class="token keyword">function</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法1 遍历</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法2 slice截取 slice(start, end) 这里是没有参数, 默认start=0，end =arguments.length</span>    newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以用 [].slice.call(arguments)</span>    <span class="token comment" spellcheck="true">//方法3  ES6语法</span>    newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//方法4 展开运算符... (简单，常用)</span>    newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getArr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10,20,30,40</span></code></pre><h3 id="6-数组扁平化处理"><a href="#6-数组扁平化处理" class="headerlink" title="6.数组扁平化处理"></a>6.数组扁平化处理</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//利用ES10新增的flat方法</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//[1,2,3,4,5,6,7,8,9],底下的输出参照这个</span><span class="token comment" spellcheck="true">//利用正则表达式+数组的方法</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[|\]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>arr2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用正则表达式与JSON.parse</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>    <span class="token string">'['</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[|\]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用递归</span><span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            arr4<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用数组的reduce方法+递归</span><span class="token keyword">let</span> fnc <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">fnc</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">:</span> cur<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token function">fnc</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span></code></pre><h3 id="7-对象函数中this指向以及this的绑定规则"><a href="#7-对象函数中this指向以及this的绑定规则" class="headerlink" title="7.对象函数中this指向以及this的绑定规则"></a><strong>7.对象函数中this指向以及this的绑定规则</strong></h3><p>this的绑定和定义的位置没有关系，跟函数调用的<strong>方式</strong>以及调用的位置有关</p><p>this是在运行时被绑定的</p><p>this的绑定规则：</p><p>①默认绑定 ：独立的函数调用(函数没有被绑定到某个对象上进行调用)</p><p>②隐式绑定 ：通过某个对象进行调用</p><p>③显示绑定：call,apply,bind在执行函数时，可以明确的绑定this</p><p>④new绑定：使用new关键字来调用函数</p><p>规则优先级：</p><p>①默认绑定规则优先级最低</p><p>②显示绑定优先级高于隐式绑定</p><p>③new绑定优先级高于隐式绑定</p><p>④new 关键字不能和apply,call一起使用，new绑定优先级高于显示绑定</p><p>总结：new绑定 &gt;显示绑定（apply/call/bind) &gt;隐式绑定 (obj.foo()) &gt;默认绑定（独立函数调用）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">222</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//fun.call(window) 此时this指向window,输出222 (默认绑定)</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//a.say.call(a) 此时this指向a，输出111    (隐式绑定)</span><span class="token keyword">var</span> b <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token number">333</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//直接看b中say这个函数 fun()相当于fun.call(window),此时this指向window,输出 222</span>b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>sayb<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//b.say.call(b)，此时this指向b，输出333 (隐式绑定)</span><span class="token comment" spellcheck="true">//显示绑定</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num1<span class="token operator">+</span>num2<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sum<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//50 String{'asd'}</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//50 String{'asd'}</span><span class="token keyword">var</span> newSum <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token function">newSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//50 String{'asd'}</span><span class="token comment" spellcheck="true">//默认绑定和显示绑定冲突(显示绑定优先)</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> newFoo <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token function">newFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//String{'aaa'} </span><span class="token comment" spellcheck="true">//我们通过一个new关键字调用一个函数时(构造器),这时候this是在调用这个构造器时创建出来的</span><span class="token comment" spellcheck="true">//this = 创建出来的对象</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'xiaolan'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//new绑定</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//xiaolan 20</span><span class="token comment" spellcheck="true">//显示优先级高于隐式示例</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//String{'abc'}</span><span class="token comment" spellcheck="true">//bind的优先级高于隐式绑定</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//String{'aaa'}</span><span class="token comment" spellcheck="true">//new绑定优先级高于隐式绑定示例</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// foo {}</span><span class="token comment" spellcheck="true">//new绑定优先级高于显示绑定示例</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// foo {}</span></code></pre><h3 id="8-箭头函数以及箭头函数中this指向"><a href="#8-箭头函数以及箭头函数中this指向" class="headerlink" title="8.箭头函数以及箭头函数中this指向"></a>8.<strong>箭头函数以及箭头函数中this指向</strong></h3><p>箭头函数不会绑定this(可以使用this)、arguments属性</p><p>箭头函数不能作为构造函数来使用，即不能和new一起来使用</p><p>箭头函数不使用上述所说的this的绑定规则，而是根据外层作用域来决定this</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//如果一个箭头函数，只有一行代码，并且返回一个对象，在箭头函数执行的{}外加上一对()</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xlz'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//测试箭头函数中this的指向</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//window</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//因为箭头函数，不满足上面this的指向，此时this指向上一级为window，输出 11</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    birth<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2000</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//21，此处this指向它的上层作用域</span></code></pre><h3 id="9-this的面试题"><a href="#9-this的面试题" class="headerlink" title="9. this的面试题"></a>9. this的面试题</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//面试题1</span><span class="token keyword">var</span> name <span class="token operator">=</span><span class="token string">'window'</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'person1'</span><span class="token punctuation">,</span>    foo1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    foo2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>    foo3<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    foo4<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'person2'</span><span class="token punctuation">}</span>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//person1(隐式绑定)</span>person1<span class="token punctuation">.</span>foo1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//person2(显示绑定优先级大于隐式绑定)</span>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//window(不绑定作用域，上层作用域是全局)</span>person1<span class="token punctuation">.</span>foo2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//同上</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//window(独立函数调用)</span>person1<span class="token punctuation">.</span>foo3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//window(独立函数调用)</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//person2(最终调用返回函数时，用显示绑定)</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//person1(箭头函数不绑定this,上层作用域this 是person1)</span>person1<span class="token punctuation">.</span>foo4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//person2(上层作用域被显示的绑定了一个person2)</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//person1(作用域上层找到person1，与call无关) 在箭头函数中，call,apply中得到对象没用，直接不看</span><span class="token comment" spellcheck="true">//面试题2</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>foo1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>foo2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>foo3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>foo4 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person2'</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person1</span>person1<span class="token punctuation">.</span>foo1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person2(显示优先级高于隐式绑定)</span>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person1 (上层作用域中的this是person1)</span>person1<span class="token punctuation">.</span>foo2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//person1,call里的person2没用，不绑定this</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span>person1<span class="token punctuation">.</span>foo3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person2</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person1</span>person1<span class="token punctuation">.</span>foo4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person2</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person1 下面这六个跟面试1题的最后六个分析方法一样</span><span class="token comment" spellcheck="true">//面试题3</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>        foo1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        foo2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>foo1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//window</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person2</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//obj</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>foo2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//person2</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//obj</span></code></pre><h3 id="10-call和apply的区别以及手写call，apply，bind-不考虑太多边界情况"><a href="#10-call和apply的区别以及手写call，apply，bind-不考虑太多边界情况" class="headerlink" title="10. call和apply的区别以及手写call，apply，bind(不考虑太多边界情况)"></a>10. call和apply的区别以及手写call，apply，bind(不考虑太多边界情况)</h3><p>传递参数不同,apply可以return出值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num1<span class="token operator">+</span>num2<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sum<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第一个参数指向调用的对象，后面的参数挨个写进去</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第一个参数指向调用的对象，后面的参数写进一个数组进行传参</span><span class="token comment" spellcheck="true">//手写call</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mycall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//...是剩余，args是数组</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//获取需要被执行的函数</span>        thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token punctuation">:</span> window <span class="token comment" spellcheck="true">//对thisArg转成对象类型(防止传入非对象类型) </span>    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">//给新对象绑定需要被执行的函数</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行新对象中的函数，运用扩展运算符...</span>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn  <span class="token comment" spellcheck="true">//先不用管他</span>        <span class="token keyword">return</span> reulst <span class="token comment" spellcheck="true">//返回最终结果</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo被执行了'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum函数被执行了'</span><span class="token punctuation">,</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//foo被执行了 String{'asd'}</span>foo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo被执行了 String{'asd'}</span><span class="token keyword">let</span> result <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sum函数被执行了 50 String{'asd'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//50</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sum函数被执行了 50 String{'asd'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//50</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//foo被执行了 window</span>foo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo被执行了 window</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo被执行了 window</span>foo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo被执行了 window</span><span class="token comment" spellcheck="true">//手写apply</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myapply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>        thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> undefined<span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token punctuation">:</span> window    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    <span class="token comment" spellcheck="true">//如果传递参数为空时，此时arr接受的是undefined，...undefined是错误的，则需要判断</span>    <span class="token comment" spellcheck="true">// 判断方式一</span>    <span class="token comment" spellcheck="true">// arr = arr ? thisArg.fn(...arr) : thisArg.fn[] </span>    <span class="token comment" spellcheck="true">//判断方式二</span>    arr <span class="token operator">=</span> arr <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn        <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum被调用'</span><span class="token punctuation">,</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//sum被调用 50 String'asd'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//50</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">myapply</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sum被调用 50 String'asd'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//50</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>undefined <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sum被调用 NaN window</span>sum<span class="token punctuation">.</span><span class="token function">myapply</span><span class="token punctuation">(</span>undefined <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sum被调用 NaN window</span><span class="token comment" spellcheck="true">//手写bind</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mybind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>    thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token punctuation">:</span> window <span class="token comment" spellcheck="true">//对thisArg转成对象类型(防止传入非对象类型) </span>    <span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        <span class="token keyword">var</span> finalArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arg<span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//将两部分参数进行合并</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>finalArr<span class="token punctuation">)</span>        <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn                <span class="token keyword">return</span> result    <span class="token punctuation">}</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo被执行"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum被执行了'</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sum被执行了 10 20 30 40 String{'asd'}  换行输出100</span><span class="token keyword">var</span> result1 <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">mybind</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result1</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//sum被执行了 10 20 30 40 String{'asd'}  换行输出100</span></code></pre><h3 id="11-赋值、浅拷贝和深拷贝"><a href="#11-赋值、浅拷贝和深拷贝" class="headerlink" title="11.赋值、浅拷贝和深拷贝"></a>11.赋值、浅拷贝和深拷贝</h3><p>赋值：把一个对象赋值给一个新的变量时，赋的是该对象在栈中的地址，不是堆中的数据。因此两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的</p><p>浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用类型共享同一块内存，会相互影响</p><p>深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝，拷贝前后两个对象互不影响</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//赋值</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    hobby<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span><span class="token string">'看电影'</span><span class="token punctuation">,</span><span class="token string">'跑步'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> personperson1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>person1<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'玩游戏'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//{name: '李四',hobby:['玩游戏','看电影','跑步']}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//{name: '李四',hobby:['玩游戏','看电影','跑步']}</span><span class="token comment" spellcheck="true">//浅拷贝</span><span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    hobby<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span><span class="token string">'看电影'</span><span class="token punctuation">,</span><span class="token string">'跑步'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>person2<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'玩游戏'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//{name: '张三',hobby:['玩游戏','看电影','跑步']}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{name: '李四',hobby:['玩游戏','看电影','跑步']}</span><span class="token comment" spellcheck="true">//☆☆☆深拷贝</span><span class="token comment" spellcheck="true">//函数一</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> cloneObj <span class="token operator">=</span> obj<span class="token punctuation">.</span>push <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数二(简单)</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> newObj <span class="token operator">=</span> obj<span class="token punctuation">.</span>push <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    hobby<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span><span class="token string">'看电影'</span><span class="token punctuation">,</span><span class="token string">'跑步'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> person3 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>person3<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'玩游戏'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//{name: '张三',hobby:['学习','看电影','跑步']}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{name: '李四',hobby:['玩游戏','看电影','跑步']}</span><span class="token operator">/</span><span class="token operator">*</span>浅拷贝的实现方式：Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>argsconcat深拷贝实现方式$<span class="token punctuation">.</span>extend自定义函数deepClone</code></pre><h3 id="12-防抖函数"><a href="#12-防抖函数" class="headerlink" title="12.防抖函数"></a>12.防抖函数</h3><p>当持续触发事件 一定时间内没有再触发事件，事件处理函数才会执行一次，如果设定的事件来到之前又一次触发了事件，就重新开始延时</p><p>闭包：函数里面return出函数</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>防抖函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#input'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//防抖函数的简单实现</span>        <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> timer            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//防抖函数运用apply</span>         <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">let</span> timer             <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                 timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                     callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                 <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="13-节流函数"><a href="#13-节流函数" class="headerlink" title="13.节流函数"></a>13.节流函数</h3><p>当持续触发事件的时候，保证一段时间内 只调用一次处理函数</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>节流函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//节流函数的简单实现</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> timer            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                        timer <span class="token operator">=</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//节流函数第二种编写方法</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="14-图片懒加载以及对图片懒加载优化"><a href="#14-图片懒加载以及对图片懒加载优化" class="headerlink" title="14.图片懒加载以及对图片懒加载优化"></a>14.图片懒加载以及对图片懒加载优化</h3><p>优势：增强用户体验，优化代码，减少http请求，减少服务器端压</p><p>原理：给img的src设置为空，同时给img标签设置一个特殊属性，例如：data-src(自定义设置)用于存放图片的真是预览地址；如果图片未进入可视区域，直接不展示图片，当图片进入可视区域，将data-src的值赋给src</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>图片懒加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">img </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f1.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f2.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f3.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f4.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f5.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f6.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f7.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/f8.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片懒加载实现</span>        <span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop            <span class="token keyword">var</span> viewportHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> height <span class="token operator">=</span> scrollTop <span class="token operator">+</span> viewportHeight <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop                <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//图片懒加载优化实现</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> imgs<span class="token punctuation">.</span>length        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> isLoadImg <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">//是否加载页面中的图片完成</span>        <span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            isLoadImg <span class="token operator">=</span> n <span class="token operator">>=</span> num            <span class="token keyword">var</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop            <span class="token keyword">var</span> viewportHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> height <span class="token operator">=</span> scrollTop <span class="token operator">+</span> viewportHeight <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop                <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span>                    n<span class="token operator">++</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> timer            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoadImg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span><span class="token function">throttle</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>isLoadImg<span class="token punctuation">)</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> isLoadImg<span class="token punctuation">)</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="15-手写Array-prototype-map方法"><a href="#15-手写Array-prototype-map方法" class="headerlink" title="15.手写Array.prototype.map方法"></a>15.手写Array.prototype.map方法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[2,4,6]</span><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mapCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token keyword">typeof</span> mapCallback <span class="token operator">!==</span>  <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mapCallback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> result   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[2,4,6]</span></code></pre><h3 id="16-策略模式以及表单验证"><a href="#16-策略模式以及表单验证" class="headerlink" title="16.策略模式以及表单验证"></a>16.策略模式以及表单验证</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>策略模式以及表单验证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usermobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#form'</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span>            isNonEmpty<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> errorMsg                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            minLength<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> errorMsg                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            isMobile<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^1[3|5|8][0-9]{9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> errorMsg                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> Validator <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dom<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> arr <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> strategy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span>                <span class="token keyword">return</span> stra tegies<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vaFunc<span class="token punctuation">;</span> vaFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token function">vaFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> msg                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> validataFun <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">'isNonEmpty'</span><span class="token punctuation">,</span> <span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span> <span class="token string">'密码长度不能小于6位'</span><span class="token punctuation">)</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>usermobile<span class="token punctuation">,</span> <span class="token string">'isMobile'</span><span class="token punctuation">,</span> <span class="token string">'手机号格式不正确'</span><span class="token punctuation">)</span>            <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> errorMsg        <span class="token punctuation">}</span>        form<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">validataFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="17-订阅发布模式"><a href="#17-订阅发布模式" class="headerlink" title="17.订阅发布模式"></a>17.订阅发布模式</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        listen<span class="token punctuation">,</span>        trigger<span class="token punctuation">,</span>        remove<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 订阅</span>    listen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 发布 </span>    trigger <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//也可以用fn(...arguments)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 取消订阅</span>    remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">String</span><span class="token punctuation">(</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        list<span class="token punctuation">,</span>        listen<span class="token punctuation">,</span>        trigger<span class="token punctuation">,</span>        remove    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'尺码是'</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'尺码是'</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//尺码是42</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//尺码是43</span>Event<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'尺码是'</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//因为标识符为red的订阅被移除了，这里不会输出任何东西</span></code></pre><h3 id="18-高阶函数"><a href="#18-高阶函数" class="headerlink" title="18.高阶函数"></a>18.高阶函数</h3><p>把一个函数如果接受另外一个函数作为参数，或者该函数会返回另外一个函数作为返回值的函数</p><h3 id="19-JavaScript纯函数"><a href="#19-JavaScript纯函数" class="headerlink" title="19.JavaScript纯函数"></a>19.JavaScript纯函数</h3><p>定义：此函数在相同的输入值时，需产生相同的输出。函数的输出和输入值与以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。该函数不能有语义上可观察的函数副作用。</p><p>总结就是：函数有确定的输入，一定会产生确定的输出。函数在执行过程中，不能产生副作用。(副作用表示在执行一个函数时，除了返回函数值之外，还对调用函数产生了附加的影响，比如修改全局变量，改变外部的存储等)</p><p>优势：可以让人安心的编写和使用，只需要关心函数的参数和返回值就可以。</p><h3 id="20-函数柯里化"><a href="#20-函数柯里化" class="headerlink" title="20.函数柯里化"></a>20.函数柯里化</h3><p>定义：是把接收多个参数的函数，变成接收一个单一参数的函数，并且返回接收余下的参数，而且返回结果的新函数的技术(过程)。</p><p>优势：让一个函数处理的问题尽可能单一，而不是将一大堆的处理过程交给一个函数来处理。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//普通函数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//60</span><span class="token comment" spellcheck="true">//函数柯里化代码</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//60</span><span class="token comment" spellcheck="true">//简化函数柯里化代码</span><span class="token keyword">var</span> sum2 <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> z <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//60    </span><span class="token comment" spellcheck="true">//自动函数柯里化转化的实现</span><span class="token keyword">function</span> <span class="token function">myCurrying</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断当前已经接收的参数的个数，参数本身与需要接受的参数是否已经一致</span>        <span class="token comment" spellcheck="true">//当已经传入的参数 >= 需要的参数时，执行函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this指向fn中的this</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//否则，返回一个新的函数，继续来接收参数</span>            <span class="token keyword">function</span> <span class="token function">curried2</span><span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//接收参数后，需要递归调用curried</span>                <span class="token keyword">return</span> curried<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> curried2        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> curried<span class="token punctuation">}</span><span class="token keyword">var</span> curryAdd <span class="token operator">=</span> <span class="token function">myCurrying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="21-组合函数"><a href="#21-组合函数" class="headerlink" title="21.组合函数"></a>21.组合函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//64</span><span class="token comment" spellcheck="true">//普普通通2个函数的组合函数</span><span class="token keyword">function</span> <span class="token function">composeFn</span><span class="token punctuation">(</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> newFn <span class="token operator">=</span> <span class="token function">composeFn</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> square<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newFn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//64</span><span class="token comment" spellcheck="true">//通用组合函数的实现</span><span class="token keyword">function</span> <span class="token function">myCompose</span><span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> fns<span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'参数中有非函数'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> length <span class="token operator">?</span> fns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">:</span> args        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> fns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span>    <span class="token keyword">return</span> compose<span class="token punctuation">}</span><span class="token keyword">var</span> newFn <span class="token operator">=</span> <span class="token function">myCompose</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> square<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newFn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//64</span></code></pre><h3 id="22-严格模式"><a href="#22-严格模式" class="headerlink" title="22.严格模式"></a>22.严格模式</h3><p>ES5 提出了严格模式，是一种具有限制性的JavaScript模式，从而使代码隐式的脱离”懒散模式“</p><p>严格模式的作用：</p><p>①严格模式通过抛出错误来消除一些原有的静默错误</p><p>②严格模式让JS引擎在执行代码时可以进行更多的优化</p><p>③严格模式禁用了在ES未来版本中可能会定义的一些语法(关键字，保留字) </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//开起严格模式</span><span class="token string">"use strict"</span> <span class="token comment" spellcheck="true">//在单独js文件中采用严格模式</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"use strict"</span> <span class="token comment" spellcheck="true">//在函数中采用严格模式</span><span class="token punctuation">}</span></code></pre><p>严格模式下常见限制：</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token comment" spellcheck="true">//1.禁止意外创建全局变量</span>message <span class="token operator">=</span> <span class="token string">'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//message is not defined</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//age is not defined</span><span class="token comment" spellcheck="true">//2.不允许函数有相同的参数名称</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//非严格模式下输出30 20 30 严格模式下输出 Duplicate parameter name not allowed in this context </span><span class="token comment" spellcheck="true">//3.静默错误</span><span class="token boolean">true</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token number">NaN</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token comment" spellcheck="true">//4.不允许使用八进制格式</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0123</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Octal literals are not allowed in strict mode</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">0o123</span> <span class="token comment" spellcheck="true">//es6之后可以使用 八进制</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">0x123</span><span class="token comment" spellcheck="true">//十六进制</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">0b100</span><span class="token comment" spellcheck="true">//二进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//83 291 4</span><span class="token comment" spellcheck="true">//5.with语句不允许使用</span><span class="token comment" spellcheck="true">//6.eval函数不会向上引用变量</span><span class="token comment" spellcheck="true">//7.严格模式下的this(重要)</span><span class="token comment" spellcheck="true">//严格模式下，自执行函数(默认绑定)会指向undefined</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'xlz'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//undefined</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{name:'why',foo:f foo()}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//8.setTimeout的this</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//严格模式下本来应该指向undefined，但这里是window</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h3 id="23-面向对象一-—对象的属性"><a href="#23-面向对象一-—对象的属性" class="headerlink" title="23.面向对象一  —对象的属性"></a>23.面向对象一  —对象的属性</h3><p>创建对象方式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建方式一:通过new Object()创建</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'xlz'</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>obj<span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建方式二：字面量形式(常用)</span><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'xlz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">20</span>    play<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对对象属性进行操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//obj中 name和age虽然没有使用属性描述符，但也有默认的特性</span><span class="token comment" spellcheck="true">//value:赋值的value, configurable: true, enumerable: true, writable: true</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xlz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">1.90</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Object.defineProperty(obj, prop, descriptor) obj为要定义属性的对象，prop为要定义或修改的属性的名称，descriptor 为要定义或修改的属性描述符,返回值为被传递给函数的对象</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"height"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>     value<span class="token punctuation">:</span> <span class="token number">1.80</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//默认值为undefined</span>    <span class="token comment" spellcheck="true">//数据属性描述符配置</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//height属性不可配置，即不可删除和修改,默认值为false</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//该属性是配置对应的属性是否可以枚举，若为false，只能通过obj.height来查看，(在浏览器中会以灰色的方式显示，方便开发者进行调试) 默认值为false</span>    writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//该属性是该属性的值不能写入和修改，这里height不能赋值，一直为1.80，默认值为false</span>    <span class="token comment" spellcheck="true">//存取属性描述符配置，存取属性描述符也有configurable，enumerable,没有writable(数据属性描述符的writable和存取属性符的get,set函数不能同时出现，只能出现两者中的一个)</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span>  value     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>定义多个属性描述符以及操作属性描述符的一些内置方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    _age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token string">'xlz'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{_age:20, name:'xlz'}</span><span class="token comment" spellcheck="true">//获取某一个特性属性的属性描述符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{value: 'xlz', writable: true, enumerable: true, configurable: true}</span><span class="token comment" spellcheck="true">//获取对象的所有属性描述符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{age:{}, name:{}, _age:{}}</span><span class="token comment" spellcheck="true">//禁止对象继续添加新的属性</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1.90</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{_age:20, name:'xlz'} height没有添加进去</span><span class="token comment" spellcheck="true">//禁止对象配置/删除里面的属性</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>nameconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//xlz 没有被删除掉</span><span class="token comment" spellcheck="true">//让属性的值不可以修改(writable:false)</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'lzx'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//xlz 不会被修改为lzx</span></code></pre><h3 id="24-面向对象二-—-创建对象方式"><a href="#24-面向对象二-—-创建对象方式" class="headerlink" title="24.面向对象二 — 创建对象方式"></a>24.面向对象二 — 创建对象方式</h3><h4 id="创建对象的方案一-—-工厂模式"><a href="#创建对象的方案一-—-工厂模式" class="headerlink" title="创建对象的方案一 — 工厂模式"></a>创建对象的方案一 — 工厂模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> name    p<span class="token punctuation">.</span>age <span class="token operator">=</span> age    p<span class="token punctuation">.</span>height <span class="token operator">=</span> height    p<span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在跑步'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span> <span class="token number">1.88</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span> <span class="token number">1.90</span><span class="token punctuation">)</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'王二虎'</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">,</span> <span class="token number">1.70</span><span class="token punctuation">)</span></code></pre><p>缺点：创建出的对象不知道类型，因为都是Object，所以无法区分不同函数创建的对象</p><h4 id="创建对象的方案二-—-构造函数"><a href="#创建对象的方案二-—-构造函数" class="headerlink" title="创建对象的方案二 — 构造函数"></a>创建对象的方案二 — 构造函数</h4><p>构造函数：也称构造器(constructor)，通常是我们在创建对象时会调用的函数</p><p>用new操作符调用的函数即构造函数，new操作符的操作：</p><p>1.在内存中创建一个新的空对象</p><p>2.这个对象内部的 [[prototype]] 属性会被赋值为该构造函数的prototype属性</p><p>3.构造函数内部的this会指向创建出来的新对象</p><p>4.执行函数的内部代码(函数体代码)</p><p>5.如果构造函数没有返回非空对象，则返回创建出来的新对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//构造函数首字符一般大写</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token keyword">this</span><span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在跑步'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.88</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true，证明了上面的第二点</span></code></pre><h3 id="25-原型"><a href="#25-原型" class="headerlink" title="25.原型"></a>25.原型</h3><h4 id="对象的原型"><a href="#对象的原型" class="headerlink" title="对象的原型"></a>对象的原型</h4><p>每个对象都有一个原型，称之(隐式原型)</p><p>查看原型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj    <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'xlz'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//es5之前</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//{}</span><span class="token comment" spellcheck="true">//es5之后</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//{}</span></code></pre><p>原型的作用：</p><p>1.在当前对象中去查找对应的属性，如果找到就直接使用</p><p>2.如果没有找到，那么会沿着它的原型去查找</p><h4 id="函数的原型"><a href="#函数的原型" class="headerlink" title="函数的原型"></a>函数的原型</h4><p>函数也是一个对象，有自己的隐式原型。因为自己还是一个函数，还会有一个显示原型为prototype</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//隐式原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//显示原型</span><span class="token comment" spellcheck="true">//foo.prototype中有一个constructor属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{writable: true, enumerable: false, configurable: true, value: ƒ}</span><span class="token comment" spellcheck="true">//prototype.constructor = 构造函数本身</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//f foo{}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//foo </span>foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//让prototype指向一个新对象，内存中就会消除constructor</span><span class="token comment" spellcheck="true">//真实开发中通过Object.defineProperty方式添加constructor</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//因为在默认的constructor中这个属性是false</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span>    value<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="原型和构造函数结合-最佳创建对象方式"><a href="#原型和构造函数结合-最佳创建对象方式" class="headerlink" title="原型和构造函数结合(最佳创建对象方式)"></a>原型和构造函数结合(最佳创建对象方式)</h4><p>为了简化对象的创建，把一个公共类放入原型中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eating <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在吃东西'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在跑步'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.88</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//张三在吃东西</span>p1<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//张三在跑步</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Person{name: '张三', age: 18, height: 1.88}</span></code></pre><h3 id="26-面向对象三-—-继承"><a href="#26-面向对象三-—-继承" class="headerlink" title="26.面向对象三 — 继承"></a>26.面向对象三 — 继承</h3><p>面向对象的三大特性：封装、继承、多态</p><p>封装：将属性和方法封装到一个类中</p><p>继承：减少重复代码数量，是多态的前提</p><p>多态：不同的对象在执行时表现出不同的形态</p><p>原型链：一个对象上可以定义无数嵌套的隐式原型，当对象的属性中没有一个属性时，他会沿着隐式原型的嵌套向上查找这个属性，这个嵌套就是原型链</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xlz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token punctuation">{</span>    height<span class="token punctuation">:</span><span class="token number">1.80</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.80</span></code></pre><p>顶级原型：如果一个对象没有定义有多个隐式原型对象，那么它有一个自己的的顶级对象为Object的原型对象，因为对象也是Object构造函数创建出来的。Object的显示原型的隐式原型指向null</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//null</span><span class="token comment" spellcheck="true">// 因为 obj.__proto__.__proto__.__proto__.__proto__ === Object.prototype</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//null</span><span class="token comment" spellcheck="true">//这里可得构造函数Person的显示原型的隐式原型 = Object的显示原型，可知Person继承了Object</span></code></pre><p>原型链的继承方式(实际开发不常用)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//父类：公共属性和方法</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lan'</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eating <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'eating'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类：特有属性和方法</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意添加顺序</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>studying <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'studying'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//弊端： 1.打印stu对象，只能看到stu对象当前下面的属性，继承的属性因为不可枚举是看不到的</span><span class="token comment" spellcheck="true">//2.创建两个stu对象，获取引用，修改引用的值，会相互影响</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['haha']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['haha']</span><span class="token comment" spellcheck="true">//3.在实现类的过程中都没有传递参数</span></code></pre><p>借助构造函数方式 — 解决以上的弊端</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//父类：公共属性和方法</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends<span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eating <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'eating'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类：特有属性和方法</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>friend<span class="token punctuation">,</span>sno<span class="token punctuation">)</span><span class="token punctuation">{</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friend<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//被调用第二次</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//被调用第一次</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>studying <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'studying'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'xiaolan'</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'hehe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'xiaohong'</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'haha'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'ohoh'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//stu1身上的属性打印都能看见</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['hehe','ohoh']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//['haha']</span><span class="token comment" spellcheck="true">//弊端：</span><span class="token comment" spellcheck="true">//1.Person函数至少被调用了两次</span><span class="token comment" spellcheck="true">//2.stu的隐式原型对象上会多出一些属性为undefined，这些属性没有存在的必要</span><span class="token comment" spellcheck="true">//因为 Student.prototype = new Person()这一步使stu的隐式原型上绑定了Person对象</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程promise-js笔记</title>
      <link href="/2021/10/11/javascript/promise/"/>
      <url>/2021/10/11/javascript/promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、单线程与多线程"><a href="#一、单线程与多线程" class="headerlink" title="一、单线程与多线程"></a>一、单线程与多线程</h2><p><strong>单线程</strong>：一次只能完成一个任务。如果有多个任务，就得排队，完成前面的任务之后才能进行下一个任务。(实现简单，耗时太长)</p><p><strong>多线程</strong>：为了提高资源使用效率，同一时间完成多个任务。</p><h2 id="二、同步与异步"><a href="#二、同步与异步" class="headerlink" title="二、同步与异步"></a>二、同步与异步</h2><p><strong>同步</strong>：任务按排列顺序执行。</p><p><strong>异步</strong>：延迟处理，浏览器在下载js的同时，还会执行后续的页面处理。</p><h2 id="三、通过代码体会异步操作"><a href="#三、通过代码体会异步操作" class="headerlink" title="三、通过代码体会异步操作"></a>三、通过代码体会异步操作</h2><h3 id="1-宏任务与微任务"><a href="#1-宏任务与微任务" class="headerlink" title="1. 宏任务与微任务"></a>1. 宏任务与微任务</h3><p>宏任务先执行，微任务后执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建微任务</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//宏任务③</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//宏任务①</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//微任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//宏任务②</span><span class="token comment" spellcheck="true">//打印结果顺序 promise  hello wolrd  setTimeout 成功</span></code></pre><h3 id="2-Promise与then的简单实现"><a href="#2-Promise与then的简单实现" class="headerlink" title="2. Promise与then的简单实现"></a>2. Promise与then的简单实现</h3><p>then返回的也是一个promise对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">resolve</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">' world'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里的value是上面的hello</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//hello world</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-Promise封装AJAX异步请求"><a href="#3-Promise封装AJAX异步请求" class="headerlink" title="3. Promise封装AJAX异步请求"></a>3. Promise封装AJAX异步请求</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'加载失败'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//模拟使用</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`http://localhost:8081`</span></span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/user`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    reason<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token operator">+</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="4-catch抛出错误的使用"><a href="#4-catch抛出错误的使用" class="headerlink" title="4. catch抛出错误的使用"></a>4. catch抛出错误的使用</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">' world'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里的value是上面的hello</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//hello world</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//catch捕获出现的reject后的then没有第二个参数并打印，打印hello world</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_链表_js-笔记</title>
      <link href="/2021/09/29/shu-ju-jie-gou/lianbiao/"/>
      <url>/2021/09/29/shu-ju-jie-gou/lianbiao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>  链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。(即在数据逻辑上是线性的)，它的每个结点由两个域组成：①存储数据元素的数据域。②存储下一个结点地址的指针域。</p><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>  ①和线性表相比，链表在添加和删除结点上的效率更高，只需要修改指针信息即可完成操作，不用像线性表(数组)那样移动元素。链表操作的时间复杂度仅为O(1)。</p><p>  ②因为链表在内存中不是连续存储的，所以可以充分利用内存中的碎片空间。</p><p>  ③链表的长度在理论上是无限的，可以动态变化长度。</p><p>  ④哈希表是基于链表来实现的</p><h2 id="二、链表类型"><a href="#二、链表类型" class="headerlink" title="二、链表类型"></a>二、链表类型</h2><h3 id="1、单链表"><a href="#1、单链表" class="headerlink" title="1、单链表"></a>1、单链表</h3><p><img src="/2021/09/29/shu-ju-jie-gou/lianbiao/lianbiao/image-20210929095228058.png"></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> Node <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>        <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token comment" spellcheck="true">//查找返回最后一个节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>findLast <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> head        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> currNode        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>            currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currNode    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在尾部增加元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">)</span><span class="token punctuation">{</span>            currNode <span class="token operator">=</span> newNode    <span class="token comment" spellcheck="true">//头节点为空的情况</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode        <span class="token punctuation">}</span>        length<span class="token operator">++</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//查找item元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> head        <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token operator">&amp;&amp;</span>currNode<span class="token punctuation">.</span>element <span class="token operator">!=</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>            currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currNode    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//插入元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> itemNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>itemNode<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>         <span class="token punctuation">}</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>                newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> itemNode<span class="token punctuation">.</span>next        itemNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode        length<span class="token operator">++</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//删除节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> currNode <span class="token operator">=</span> head       <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>element <span class="token operator">!==</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历完链表，没找到item</span>               <span class="token keyword">return</span>            <span class="token punctuation">}</span>           currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next       <span class="token punctuation">}</span>        currNode<span class="token punctuation">.</span>next<span class="token operator">=</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        length<span class="token operator">--</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//打印链表元素</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">let</span> currNode <span class="token operator">=</span> head          <span class="token keyword">while</span> <span class="token punctuation">(</span>currNode <span class="token punctuation">)</span> <span class="token punctuation">{</span>              result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span>              currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next          <span class="token punctuation">}</span>          <span class="token keyword">return</span> result      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取头结点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getHead <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试部分：</span><span class="token keyword">let</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    myList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//[1, 4, 5, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Node{element:5,next:Node}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Node{element:3,next:null}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//undefined 函数默认返回值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1, 5, 2, 3]</span></code></pre><h3 id="2、双链表"><a href="#2、双链表" class="headerlink" title="2、双链表"></a>2、双链表</h3><p><img src="/2021/09/29/shu-ju-jie-gou/lianbiao/lianbiao/1632981792(1).jpg"></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> Node <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">//查找最后一个节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>findLast <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> head        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> currNode        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>            currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currNode    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//查找特定元素节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> head        <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element <span class="token operator">!==</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>             <span class="token punctuation">}</span>            currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currNode    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在某节点后插入一个新节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>currNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode            newNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> currNode        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next            newNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> currNode            currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>previous <span class="token operator">=</span> newNode            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode        <span class="token punctuation">}</span>        length<span class="token operator">++</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在尾结点插入元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">)</span><span class="token punctuation">{</span>            head <span class="token operator">=</span> newNode        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode            newNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> currNode        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//删除某节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>currNode<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>  currNode<span class="token punctuation">.</span>previous <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//该节点前后节点都不为空</span>            currNode<span class="token punctuation">.</span>previous<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next            currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>previous <span class="token operator">=</span> currNode<span class="token punctuation">.</span>previous            currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>            currNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>previous <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//该节点的前一节点为空</span>            head <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next            currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span>            currNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//该节点的后一节点为空</span>            currNode<span class="token punctuation">.</span>previous<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>            currNode<span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        length<span class="token operator">--</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//打印链表元素</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">let</span> currNode <span class="token operator">=</span> head          <span class="token keyword">while</span> <span class="token punctuation">(</span>currNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>              result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span>              currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next          <span class="token punctuation">}</span>          <span class="token keyword">return</span> result      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试部分</span><span class="token keyword">let</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">doubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    myList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[ 1, 4, 5, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//Node{element:5,next:Node,previous:Node}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//undefined 函数默认返回</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//[ 1, 5, 2, 3]</span></code></pre><h3 id="3、循环链表"><a href="#3、循环链表" class="headerlink" title="3、循环链表"></a>3、循环链表</h3><p>循环链表可以像单链表一样只有单向引用，也可以像双向链表一样有双向引用。唯一区别在于最后一个元素指向下一个元素的指针tail.next不是引用null，而是指向第一个元素(head)</p><p><img src="/2021/09/29/shu-ju-jie-gou/lianbiao/lianbiao/xunhuandan.jpg"></p><p><img src="/2021/09/29/shu-ju-jie-gou/lianbiao/lianbiao/xunhuanshuang.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式-js笔记</title>
      <link href="/2021/09/28/javascript/zhengze/"/>
      <url>/2021/09/28/javascript/zhengze/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、正则表达式语法"><a href="#一、正则表达式语法" class="headerlink" title="一、正则表达式语法"></a>一、正则表达式语法</h2><h3 id="1-修饰符"><a href="#1-修饰符" class="headerlink" title="1.修饰符"></a>1.修饰符</h3><p>i   &nbsp;对大小写不敏感</p><p>g   全局匹配,匹配出多组数据构成一个一维数组</p><p>m   多行匹配</p><p>?   &nbsp; 匹配0个或1个</p><p>+   &nbsp;匹配一个或多个</p><p>*    匹配0个或多个</p><h3 id="2-模式"><a href="#2-模式" class="headerlink" title="2.模式"></a>2.模式</h3><h4 id="①元字符-常用"><a href="#①元字符-常用" class="headerlink" title="①元字符(常用)"></a>①元字符(常用)</h4><p>\d   匹配数字</p><p>\D   匹配非数字</p><p>\s   匹配空白字符和换号</p><p>\S   匹配非空白</p><p>\w  &nbsp; 匹配字母数字下划线</p><p>\W   &nbsp;匹配除了字母数字下划线</p><p>.       &nbsp;匹配除了换行以外的任意字符</p><p>[\s\S]  &nbsp;匹配所有字符</p><p>[\d\D]  匹配所有字符</p><h4 id="②表达式"><a href="#②表达式" class="headerlink" title="②表达式"></a>②表达式</h4><p>[asd]  查找方括号之间任何字符，可看做 a||s||d</p><p>[0-9]  查找0-9任何数字</p><p>(123|asd) 查找括号中满足的一组数 ，可看做 123||asd</p><p>{1,3}  查找满足的个数为1-3个</p><h2 id="二、演示"><a href="#二、演示" class="headerlink" title="二、演示"></a>二、演示</h2><h3 id="1、字面量创建-常用"><a href="#1、字面量创建-常用" class="headerlink" title="1、字面量创建(常用)"></a>1、字面量创建(常用)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s<span class="token operator">=</span><span class="token string">'xiaolan123'</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'lan'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2、对象方式创建"><a href="#2、对象方式创建" class="headerlink" title="2、对象方式创建"></a>2、对象方式创建</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'lan'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// /lan/</span><span class="token keyword">let</span> s<span class="token operator">=</span><span class="token string">'xiaolan123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="3、选择符-的使用"><a href="#3、选择符-的使用" class="headerlink" title="3、选择符 | 的使用"></a>3、选择符 | 的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> tel<span class="token operator">=</span><span class="token string">'010-12345678'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/(010|020)\-\d{7,8}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//(010|020)表示010||020, \-表示- (\为转义字符),\d{7,8}表示满足数字7-8个</span></code></pre><h3 id="4、原子组-（）的使用"><a href="#4、原子组-（）的使用" class="headerlink" title="4、原子组 （）的使用"></a>4、原子组 （）的使用</h3><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asd123456'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(12|34)/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//['12','34']</span></code></pre><h3 id="5、转义-的使用"><a href="#5、转义-的使用" class="headerlink" title="5、转义 \ 的使用"></a>5、转义 \ 的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token string">'http://xiaolan1.icu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/http:\/\/\w+\.\w+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//   \/转义为/  \.转义为.</span></code></pre><h3 id="6、字符边界符-的使用"><a href="#6、字符边界符-的使用" class="headerlink" title="6、字符边界符 ^   $  的使用"></a>6、字符边界符 ^   $  的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token string">'http://xiaolan1.icu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/^(http:)\/\/\w+.(\w+)$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//^(http:)表示匹配以http:开头，（\w+)$表示以1个或多个字母符号下划线结尾</span></code></pre><h3 id="7、-的使用"><a href="#7、-的使用" class="headerlink" title="7、[^]的使用"></a>7、[^]的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token string">'http://xiaolan1.icu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^:\/\.]+/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//['http','xiaolan1','icu']</span><span class="token comment" spellcheck="true">//[^:\/.]表示不匹配: / .</span></code></pre><h3 id="8、点字符的使用"><a href="#8、点字符的使用" class="headerlink" title="8、点字符的使用"></a>8、点字符的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token string">'http://xiao\nlan1.icu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.+/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//['http://xiao', 'lan1.icu']</span></code></pre><h3 id="9、m-多行匹配的使用"><a href="#9、m-多行匹配的使用" class="headerlink" title="9、m 多行匹配的使用"></a>9、m 多行匹配的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token template-string"><span class="token string">`  #1 xiaolan1.icu #  #2 baidu.com #`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s.+/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//['\n  #1 xiaolan1.icu #']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s.+/mg</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//['\n  #1 xiaolan1.icu #', '  #2 baidu.com #']</span></code></pre><h3 id="10、原子表-的使用"><a href="#10、原子表-的使用" class="headerlink" title="10、原子表 []的使用"></a>10、原子表 []的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> time<span class="token operator">=</span> <span class="token string">'2021-09/28'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\d{4}[-\/]\d{2}[-\/]\d{2}$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//['2021-09/28']</span></code></pre><h3 id="11、嵌套分组与不记录分组"><a href="#11、嵌套分组与不记录分组" class="headerlink" title="11、嵌套分组与不记录分组"></a>11、嵌套分组与不记录分组</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url<span class="token operator">=</span><span class="token template-string"><span class="token string">` https://www.baidu.com http://xiaolan1.icu`</span></span><span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token regex">/https?:\/\/((w+\.)?\w+\.(?:com|org|cn))/i</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//["https://www.baidu.com", "www.baidu.com", "www."]</span><span class="token comment" spellcheck="true">//第一个元素是整体匹配的结果，第二个元素是((w+\.)?\w+\.(?:com|org|cn))匹配的结果，第三个括号是 (w+\.),因为括号(?:com|org|cn)中有?: 所以不记录该分组</span></code></pre><h3 id="12、禁止贪婪-意思为内容尽可能少"><a href="#12、禁止贪婪-意思为内容尽可能少" class="headerlink" title="12、禁止贪婪 (意思为内容尽可能少)"></a>12、禁止贪婪 (意思为内容尽可能少)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'xiaolan1.icu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/xiao\w+?/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//['xiaol']  表示\w+只匹配一个字母符号下划线</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/xiao\w*?/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//['xiao']  表示\w*只匹配0个字母符号下划线</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/xiao\w{2,4}?/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//['xiaola']  表示\w{2,4}只匹配2个字母符号下划线</span></code></pre><h3 id="13、matchAll全局匹配的使用"><a href="#13、matchAll全局匹配的使用" class="headerlink" title="13、matchAll全局匹配的使用"></a>13、matchAll全局匹配的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'www.xiaolan1.icu.123456'</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\w+\./gi</span><span class="token keyword">let</span> result <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//依次打印出 ['www.']  ['xiaolan1.']  ['icu.']</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//["www.", "xiaolan1.", "icu."]</span></code></pre><h3 id="14、serach方法的使用"><a href="#14、serach方法的使用" class="headerlink" title="14、serach方法的使用"></a>14、serach方法的使用</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'xiaolan1.icu'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/l/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//4</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/\d.\w+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7</span><span class="token comment" spellcheck="true">//从0开始打印出匹配出元素的首个位置</span></code></pre><h3 id="15、-amp-的使用"><a href="#15、-amp-的使用" class="headerlink" title="15、$&amp;的使用"></a>15、$&amp;的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'xiaolan1.icu'</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\w+./</span><span class="token punctuation">,</span><span class="token template-string"><span class="token string">`$&amp;`</span></span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//  xiaolan.icu</span><span class="token comment" spellcheck="true">//$&amp;为匹配元素自身</span></code></pre><h2 id="三、常用的正则匹配示例"><a href="#三、常用的正则匹配示例" class="headerlink" title="三、常用的正则匹配示例"></a>三、常用的正则匹配示例</h2><p>参考网站：<a href="http://tools.jb51.net/regex/create_reg/">http://tools.jb51.net/regex/create_reg/</a></p><h3 id="1、手机号码（国内）"><a href="#1、手机号码（国内）" class="headerlink" title="1、手机号码（国内）"></a>1、手机号码（国内）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/^(13|14|15|17|18)[0-9]{9}/</span></code></pre><h3 id="2、中文字符"><a href="#2、中文字符" class="headerlink" title="2、中文字符"></a>2、中文字符</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/[\u4e00-\u9fa5]/</span></code></pre><h3 id="3、邮箱判断"><a href="#3、邮箱判断" class="headerlink" title="3、邮箱判断"></a>3、邮箱判断</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]{2,14}/</span></code></pre><h3 id="4、网址判断"><a href="#4、网址判断" class="headerlink" title="4、网址判断"></a>4、网址判断</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/^((https?|ftp|rtsp|mms)?:\/\/)[^\s]+/</span></code></pre><h3 id="5、身份证号（15位或18位）"><a href="#5、身份证号（15位或18位）" class="headerlink" title="5、身份证号（15位或18位）"></a>5、身份证号（15位或18位）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/\d{17}[\d|x]|\d{15}/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+git+hexo-matery博客搭建(最详细教程)</title>
      <link href="/2021/08/27/github-git-hexo-matery/"/>
      <url>/2021/08/27/github-git-hexo-matery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、创建github账号"><a href="#一、创建github账号" class="headerlink" title="一、创建github账号"></a>一、创建github账号</h2><p><strong>有github账号和使用经历的可直接跳过</strong></p><p>首先进入github官网 <a href="https://github.com/">https://github.com/</a> </p><p>注意：github可能需要梯子进入，要不然可能进不去</p><img src="/2021/08/27/github-git-hexo-matery/image-20210827165645026.png" style="zoom:50%;"><p>Sign up 创建账号，跟着步骤注册即可，注册完登陆，登陆后，进入<img src="/2021/08/27/github-git-hexo-matery/image-20210827170020405.png" style="zoom: 67%;">第二个，你的仓库，</p><p><img src="/2021/08/27/github-git-hexo-matery/image-20210827170156123.png" style="zoom:50%;">NEW 一个新的存储库</p><p>注意：<img src="/2021/08/27/github-git-hexo-matery/image-20210827170346352.png" style="zoom:50%;">名称填写： 你的用户名.github.io</p><p>填写完在最下面点<img src="/2021/08/27/github-git-hexo-matery/image-20210827170627791.png" style="zoom: 50%;">创建即可</p><p>接下来你就可以输入  你的用户名.github.io来访问你的页面啦，虽然这网址有点怪，我们后续可以给他匹配域名</p><h2 id="二、安装git并绑定github账号"><a href="#二、安装git并绑定github账号" class="headerlink" title="二、安装git并绑定github账号"></a>二、安装git并绑定github账号</h2><h3 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h3><p>进入git官网<a href="https://git-scm.com/">https://git-scm.com/</a><img src="/2021/08/27/github-git-hexo-matery/image-20210827172529995.png" style="zoom:50%;">下载git，默认安装</p><p><img src="/2021/08/27/github-git-hexo-matery/image-20210827172816793.png" style="zoom:33%;">安装完成后，在桌面右击<img src="/2021/08/27/github-git-hexo-matery/image-20210827172931791.png">出现红色框内表示安装成功</p><h3 id="2、绑定github账号"><a href="#2、绑定github账号" class="headerlink" title="2、绑定github账号"></a>2、绑定github账号</h3><p>绑定git与github账号，方便以后往github账号中上传文件更简单</p><h4 id="1-添加ssh-key"><a href="#1-添加ssh-key" class="headerlink" title="1.添加ssh key"></a>1.添加ssh key</h4><p><img src="/2021/08/27/github-git-hexo-matery/image-20210827195011727.png" style="zoom:50%;">进入settings，点击<img src="/2021/08/27/github-git-hexo-matery/image-20210827195116929.png">再点击<img src="/2021/08/27/github-git-hexo-matery/image-20210827195346124.png"> 打开前面下载的git，在里面输入</p><pre><code>ssh-keygen -t rsa -C "xxxx@xxx.com" </code></pre><p>双引号中为你的github账号邮箱，执行完成后，打开生成的ssh key文件 id_rsa.pub,仿照我的文件目录 <img src="/2021/08/27/github-git-hexo-matery/image-20210827195808683.png" style="zoom:50%;"></p><p>复制id_rsa.pub文件中的内容，为你的秘钥，把内容粘贴到前面打开的New SSH key中的 key中，Title随便填</p><h4 id="2-验证ssh-key是否添加成功"><a href="#2-验证ssh-key是否添加成功" class="headerlink" title="2.验证ssh key是否添加成功"></a>2.验证ssh key是否添加成功</h4><p>输入</p><p><img src="/2021/08/27/github-git-hexo-matery/image-20210827200553231.png"></p><p>在下面提示的消息中输入前面设置的密码，输入的时候你看不到，出现下面这种消息表示添加成功<img src="/2021/08/27/github-git-hexo-matery/image-20210827200405263.png"></p><h4 id="3-设置username和email"><a href="#3-设置username和email" class="headerlink" title="3.设置username和email"></a>3.设置username和email</h4><p>在git 中输入</p><pre><code>git config --global user.name "你的用户名"git config --global user.email "你的用户名邮箱"</code></pre><p>就好了，这里提交文件用下面hexo的命令，如需git命令提交文件，则请看git标签中，<strong>git提交</strong>文章</p><h2 id="三、使用hexo来进行博客搭建"><a href="#三、使用hexo来进行博客搭建" class="headerlink" title="三、使用hexo来进行博客搭建"></a>三、使用hexo来进行博客搭建</h2><h3 id="1、安装node"><a href="#1、安装node" class="headerlink" title="1、安装node"></a>1、安装node</h3><p>进入node官网下载<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> ，然后默认安装</p><p>安装完成后，打开cmd检验是否安装成功，win+R 输入图片内容<img src="/2021/08/27/github-git-hexo-matery/image-20210827171307167.png" style="zoom:50%;"></p><p>则安装成功</p><h3 id="2、安装hexo并初始化hexo"><a href="#2、安装hexo并初始化hexo" class="headerlink" title="2、安装hexo并初始化hexo"></a>2、安装hexo并初始化hexo</h3><p>在D盘中新建一个文件夹为Blog,打开Blog,右键打开Git Bash Here ,输入</p><pre><code>npm install -g hexo cli</code></pre><p>安装完成后，输入以下命令初始化博客</p><pre><code>hexo init</code></pre><p>输入下列命令进行静态部署：</p><pre><code>hexo g</code></pre><p>部署完成后，输入以下命令可以查看到：</p><img src="/2021/08/27/github-git-hexo-matery/image-20210827201905061.png" style="zoom:50%;"><p>按住Ctrl 点击localhost：4000可以打开这个网站，此时出现以下这个界面，表示hexo初始化成功</p><img src="/2021/08/27/github-git-hexo-matery/image-20210827201952731.png" style="zoom:50%;"><p>想要关闭命令按： ctrl + c 为停止运行</p><h3 id="3、将hexo部署到GitHub"><a href="#3、将hexo部署到GitHub" class="headerlink" title="3、将hexo部署到GitHub"></a>3、将hexo部署到GitHub</h3><p>此时你生成的文件只能在你的电脑中运行，其他用户看不到，需要把Blog中的文件上传的github上。</p><p><img src="/2021/08/27/github-git-hexo-matery/image-20210827202229399.png" style="zoom:50%;">在Blog中找到_config.yml右击 在打开方式中用 记事本打开，拉到文件底部，填写以下内容：</p><blockquote><pre class=" language-text"><code class="language-text">deploy:  type: git  repository: https://github.com/1417847538/1417847538.github.io.git  #你的仓库地址  branch: master</code></pre></blockquote><p>注意空格！冒号后面有一个空格  你的仓库地址为code下面的第一行网址，复制下来，粘上去即可</p><img src="/2021/08/27/github-git-hexo-matery/image-20210827202626411.png" style="zoom:50%;">    <p>回到Blog文件中，右击打开Git Bash 输入命令：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>等待安装完成后，分别输入：</p><pre class=" language-text"><code class="language-text">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</code></pre><p>完成后，输入你的 你的用户名.github.io 就可以打开你的网页看到以下这个界面了<img src="/2021/08/27/github-git-hexo-matery/image-20210827201952731.png" style="zoom:50%;"></p><h2 id="四、配置hexo主题（matery）"><a href="#四、配置hexo主题（matery）" class="headerlink" title="四、配置hexo主题（matery）"></a>四、配置hexo主题（matery）</h2><p>hexo中有很多的主题样式，我们在github中搜索hexo主题，或者进入hexo主题官网 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 都能选择一款自己喜欢的主题作为自己的博客框架</p><p>这里我选择的matery主题 首先进入<a href="https://github.com/blinkfox/hexo-theme-matery/tree/master">https://github.com/blinkfox/hexo-theme-matery/tree/master</a> 下载这个主题，下载完成后解压到文件夹</p><p><img src="/2021/08/27/github-git-hexo-matery/image-20210828101511078.png"></p><p>在自己Blog文件夹中建一个名为theme的文件夹<img src="/2021/08/27/github-git-hexo-matery/image-20210828101555982.png" style="zoom:50%;">把刚刚解压的hexo-theme-matery文件复制到theme文件夹中，打开Blog下的_config.yml文件夹，更改#Site下的内容，例如 <img src="/2021/08/27/github-git-hexo-matery/image-20210828102344227.png" style="zoom:50%;"></p><p><strong>注意：冒号后有一个空格！</strong></p><p>然后换上你的主题，找到如下内容<img src="/2021/08/27/github-git-hexo-matery/image-20210828102619163.png"></p><p>在theme中换上你前面解压的主题名，我这里为hexo-theme-matery,填写完成后保存，打开Git Bash ，输入</p><pre><code>hexo clean  #清除缓存文件 db.json 和已生成的静态文件 publichexo g      #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d      #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</code></pre><p>就将自己当前更换的主题文件上传到自己的github中了。</p><p>一个调试技巧：在更改Blog内容时，可以在Git Bash 中输入 <strong>hexo s</strong> 打开http：后的网址，进行实时页面更改后的查看<img src="/2021/08/27/github-git-hexo-matery/image-20210827201905061.png"></p><p>以后每次更改完Blog文件中的内容以及确认后，都可以输入<strong>hexo clean &amp;&amp; hexo g -d</strong> 进行文件上传。</p><h2 id="五、个性化matery主题，以及我在配置中出现的问题—进阶"><a href="#五、个性化matery主题，以及我在配置中出现的问题—进阶" class="headerlink" title="五、个性化matery主题，以及我在配置中出现的问题—进阶"></a>五、个性化matery主题，以及我在配置中出现的问题—进阶</h2><h3 id="1、个性化matery主题"><a href="#1、个性化matery主题" class="headerlink" title="1、个性化matery主题"></a>1、个性化matery主题</h3><p>具体可以参考hexo-theme-matery文件夹下的这两个文件，上面为英文版，下面为中文版<img src="/2021/08/27/github-git-hexo-matery/image-20210828103934776.png">里面的内容在这里遍不过多介绍，照着做就好</p><h3 id="2、我在配置中出现的问题"><a href="#2、我在配置中出现的问题" class="headerlink" title="2、我在配置中出现的问题"></a>2、我在配置中出现的问题</h3><h4 id="1-主题下的-config-yml"><a href="#1-主题下的-config-yml" class="headerlink" title="1.主题下的_config.yml"></a>1.主题下的_config.yml</h4><p>首先要浏览主题下的（也就是hexo-theme-matery）的_config.yml文件，里面都有相应的中文内容介绍，一开始最好浏览一遍，进行你想要的更改</p><h4 id="2-二级菜单的使用"><a href="#2-二级菜单的使用" class="headerlink" title="2.二级菜单的使用"></a>2.二级菜单的使用</h4><p>如果你想要使用二级菜单，你可以在想用的一级标签下按如下方式输入children里的内容<img src="/2021/08/27/github-git-hexo-matery/image-20210828104338044.png" style="zoom: 80%;"><strong>注意children以及里面内容放的位置</strong></p><h4 id="3-music的使用"><a href="#3-music的使用" class="headerlink" title="3.music的使用"></a>3.music的使用</h4><p>这里配置完music里的内容后，有一点要注意<img src="/2021/08/27/github-git-hexo-matery/image-20210828104847108.png"></p><p>id必须为自己创建的歌单的id，不能是例如 网易云中我喜欢的音乐的id，这个id好像通常为10位，而我喜欢的音乐id为9位，就这个原因，我折腾近3个小时，希望大家避雷</p><h4 id="4-valine留言模块"><a href="#4-valine留言模块" class="headerlink" title="4.valine留言模块"></a>4.valine留言模块</h4><p>这是个所有人都可以留言的评论模块，具体可参考 <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a> </p><p><strong>关于leanCloud的使用</strong></p><p>目前我掌握的是管理所有人的留言，在对应的以下选择中可以看见评论内容，然后可以进行选择性删除。</p><img src="/2021/08/27/github-git-hexo-matery/image-20210828110127541.png" style="zoom:50%;"><h4 id="5-gitalk留言模块"><a href="#5-gitalk留言模块" class="headerlink" title="5.gitalk留言模块"></a>5.gitalk留言模块</h4><p>gitalk和gitment，我在网上查阅，大家建议使用gitalk评论模块，使用建议参考 </p><p><a href="https://segmentfault.com/a/1190000018072952">https://segmentfault.com/a/1190000018072952</a> </p><p>注意：找到gitalk.ejs文件<img src="/2021/08/27/github-git-hexo-matery/image-20210828110616851.png" style="zoom:50%;">，其中id必须填写，这就要你先前往github中使用issue，<strong>避雷！</strong></p><img src="/2021/08/27/github-git-hexo-matery/image-20210828110717020.png" style="zoom:50%;"><p>这里必须给issue设置标签，第一个默认必须为Gitalk，第二个为你设置的id名，跟gitalk.ejs文件中id名匹配，才能在页面中显示gitalk留言模块，这里大概折腾2小时。</p><p>疑问望大佬给予回答：关于github登陆443问题<img src="/2021/08/27/github-git-hexo-matery/image-20210828111022789.png" style="zoom:50%;"></p><p>这个评论目前只能进入github找到我的github.io仓库下具体issue内容中进行评论，而不能在页面中直接进行评论。</p><h4 id="6-新建文章以及推荐文章设置"><a href="#6-新建文章以及推荐文章设置" class="headerlink" title="6.新建文章以及推荐文章设置"></a>6.新建文章以及推荐文章设置</h4><p>我们所写的文章都在_posts文件夹下<img src="/2021/08/27/github-git-hexo-matery/image-20210828111515839.png"></p><p>如果想要新建文章，可以在这个文件夹下新建 xxx.md文件，xxx为英文名，内容随便写，建议语义化文章标题，以后方便修改。</p><p>里面的内容配置具体参考 主题文档中的<img src="/2021/08/27/github-git-hexo-matery/image-20210828112112312.png"></p><p>按示例可进行配置</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world!</title>
      <link href="/2021/08/24/hello-world/"/>
      <url>/2021/08/24/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
